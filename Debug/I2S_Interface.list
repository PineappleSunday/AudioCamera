
I2S_Interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003880  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003a14  08003a14  00004a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a40  08003a40  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003a40  08003a40  00004a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a48  08003a48  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a48  08003a48  00004a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a4c  08003a4c  00004a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003a50  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000714  2000000c  08003a5c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000720  08003a5c  00005720  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a5c2  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d01  00000000  00000000  0000f5fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d8  00000000  00000000  00011300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006c8  00000000  00000000  00011bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015ce1  00000000  00000000  000122a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bacd  00000000  00000000  00027f81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086e2e  00000000  00000000  00033a4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ba87c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002364  00000000  00000000  000ba8c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000bcc24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080039fc 	.word	0x080039fc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080039fc 	.word	0x080039fc

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b988 	b.w	800050c <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	468e      	mov	lr, r1
 800021c:	4604      	mov	r4, r0
 800021e:	4688      	mov	r8, r1
 8000220:	2b00      	cmp	r3, #0
 8000222:	d14a      	bne.n	80002ba <__udivmoddi4+0xa6>
 8000224:	428a      	cmp	r2, r1
 8000226:	4617      	mov	r7, r2
 8000228:	d962      	bls.n	80002f0 <__udivmoddi4+0xdc>
 800022a:	fab2 f682 	clz	r6, r2
 800022e:	b14e      	cbz	r6, 8000244 <__udivmoddi4+0x30>
 8000230:	f1c6 0320 	rsb	r3, r6, #32
 8000234:	fa01 f806 	lsl.w	r8, r1, r6
 8000238:	fa20 f303 	lsr.w	r3, r0, r3
 800023c:	40b7      	lsls	r7, r6
 800023e:	ea43 0808 	orr.w	r8, r3, r8
 8000242:	40b4      	lsls	r4, r6
 8000244:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000248:	fa1f fc87 	uxth.w	ip, r7
 800024c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000250:	0c23      	lsrs	r3, r4, #16
 8000252:	fb0e 8811 	mls	r8, lr, r1, r8
 8000256:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800025a:	fb01 f20c 	mul.w	r2, r1, ip
 800025e:	429a      	cmp	r2, r3
 8000260:	d909      	bls.n	8000276 <__udivmoddi4+0x62>
 8000262:	18fb      	adds	r3, r7, r3
 8000264:	f101 30ff 	add.w	r0, r1, #4294967295
 8000268:	f080 80ea 	bcs.w	8000440 <__udivmoddi4+0x22c>
 800026c:	429a      	cmp	r2, r3
 800026e:	f240 80e7 	bls.w	8000440 <__udivmoddi4+0x22c>
 8000272:	3902      	subs	r1, #2
 8000274:	443b      	add	r3, r7
 8000276:	1a9a      	subs	r2, r3, r2
 8000278:	b2a3      	uxth	r3, r4
 800027a:	fbb2 f0fe 	udiv	r0, r2, lr
 800027e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000282:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000286:	fb00 fc0c 	mul.w	ip, r0, ip
 800028a:	459c      	cmp	ip, r3
 800028c:	d909      	bls.n	80002a2 <__udivmoddi4+0x8e>
 800028e:	18fb      	adds	r3, r7, r3
 8000290:	f100 32ff 	add.w	r2, r0, #4294967295
 8000294:	f080 80d6 	bcs.w	8000444 <__udivmoddi4+0x230>
 8000298:	459c      	cmp	ip, r3
 800029a:	f240 80d3 	bls.w	8000444 <__udivmoddi4+0x230>
 800029e:	443b      	add	r3, r7
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a6:	eba3 030c 	sub.w	r3, r3, ip
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa2>
 80002ae:	40f3      	lsrs	r3, r6
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xb6>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb0>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa2>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x14c>
 80002d2:	4573      	cmp	r3, lr
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xc8>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 8105 	bhi.w	80004e6 <__udivmoddi4+0x2d2>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb6e 0203 	sbc.w	r2, lr, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	4690      	mov	r8, r2
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e5      	beq.n	80002b6 <__udivmoddi4+0xa2>
 80002ea:	e9c5 4800 	strd	r4, r8, [r5]
 80002ee:	e7e2      	b.n	80002b6 <__udivmoddi4+0xa2>
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f000 8090 	beq.w	8000416 <__udivmoddi4+0x202>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f040 80a4 	bne.w	8000448 <__udivmoddi4+0x234>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	0c03      	lsrs	r3, r0, #16
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	b280      	uxth	r0, r0
 800030a:	b2bc      	uxth	r4, r7
 800030c:	2101      	movs	r1, #1
 800030e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000312:	fb0e 221c 	mls	r2, lr, ip, r2
 8000316:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800031a:	fb04 f20c 	mul.w	r2, r4, ip
 800031e:	429a      	cmp	r2, r3
 8000320:	d907      	bls.n	8000332 <__udivmoddi4+0x11e>
 8000322:	18fb      	adds	r3, r7, r3
 8000324:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000328:	d202      	bcs.n	8000330 <__udivmoddi4+0x11c>
 800032a:	429a      	cmp	r2, r3
 800032c:	f200 80e0 	bhi.w	80004f0 <__udivmoddi4+0x2dc>
 8000330:	46c4      	mov	ip, r8
 8000332:	1a9b      	subs	r3, r3, r2
 8000334:	fbb3 f2fe 	udiv	r2, r3, lr
 8000338:	fb0e 3312 	mls	r3, lr, r2, r3
 800033c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000340:	fb02 f404 	mul.w	r4, r2, r4
 8000344:	429c      	cmp	r4, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x144>
 8000348:	18fb      	adds	r3, r7, r3
 800034a:	f102 30ff 	add.w	r0, r2, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x142>
 8000350:	429c      	cmp	r4, r3
 8000352:	f200 80ca 	bhi.w	80004ea <__udivmoddi4+0x2d6>
 8000356:	4602      	mov	r2, r0
 8000358:	1b1b      	subs	r3, r3, r4
 800035a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x98>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa0e f401 	lsl.w	r4, lr, r1
 8000370:	fa20 f306 	lsr.w	r3, r0, r6
 8000374:	fa2e fe06 	lsr.w	lr, lr, r6
 8000378:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fa00 f801 	lsl.w	r8, r0, r1
 8000382:	fa1f fc87 	uxth.w	ip, r7
 8000386:	fbbe f0f9 	udiv	r0, lr, r9
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000390:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000394:	fb00 fe0c 	mul.w	lr, r0, ip
 8000398:	45a6      	cmp	lr, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1a0>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003a6:	f080 809c 	bcs.w	80004e2 <__udivmoddi4+0x2ce>
 80003aa:	45a6      	cmp	lr, r4
 80003ac:	f240 8099 	bls.w	80004e2 <__udivmoddi4+0x2ce>
 80003b0:	3802      	subs	r0, #2
 80003b2:	443c      	add	r4, r7
 80003b4:	eba4 040e 	sub.w	r4, r4, lr
 80003b8:	fa1f fe83 	uxth.w	lr, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003cc:	45a4      	cmp	ip, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1ce>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003d6:	f080 8082 	bcs.w	80004de <__udivmoddi4+0x2ca>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d97f      	bls.n	80004de <__udivmoddi4+0x2ca>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e6:	eba4 040c 	sub.w	r4, r4, ip
 80003ea:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ee:	4564      	cmp	r4, ip
 80003f0:	4673      	mov	r3, lr
 80003f2:	46e1      	mov	r9, ip
 80003f4:	d362      	bcc.n	80004bc <__udivmoddi4+0x2a8>
 80003f6:	d05f      	beq.n	80004b8 <__udivmoddi4+0x2a4>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x1fe>
 80003fa:	ebb8 0203 	subs.w	r2, r8, r3
 80003fe:	eb64 0409 	sbc.w	r4, r4, r9
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	fa22 f301 	lsr.w	r3, r2, r1
 800040a:	431e      	orrs	r6, r3
 800040c:	40cc      	lsrs	r4, r1
 800040e:	e9c5 6400 	strd	r6, r4, [r5]
 8000412:	2100      	movs	r1, #0
 8000414:	e74f      	b.n	80002b6 <__udivmoddi4+0xa2>
 8000416:	fbb1 fcf2 	udiv	ip, r1, r2
 800041a:	0c01      	lsrs	r1, r0, #16
 800041c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000420:	b280      	uxth	r0, r0
 8000422:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000426:	463b      	mov	r3, r7
 8000428:	4638      	mov	r0, r7
 800042a:	463c      	mov	r4, r7
 800042c:	46b8      	mov	r8, r7
 800042e:	46be      	mov	lr, r7
 8000430:	2620      	movs	r6, #32
 8000432:	fbb1 f1f7 	udiv	r1, r1, r7
 8000436:	eba2 0208 	sub.w	r2, r2, r8
 800043a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043e:	e766      	b.n	800030e <__udivmoddi4+0xfa>
 8000440:	4601      	mov	r1, r0
 8000442:	e718      	b.n	8000276 <__udivmoddi4+0x62>
 8000444:	4610      	mov	r0, r2
 8000446:	e72c      	b.n	80002a2 <__udivmoddi4+0x8e>
 8000448:	f1c6 0220 	rsb	r2, r6, #32
 800044c:	fa2e f302 	lsr.w	r3, lr, r2
 8000450:	40b7      	lsls	r7, r6
 8000452:	40b1      	lsls	r1, r6
 8000454:	fa20 f202 	lsr.w	r2, r0, r2
 8000458:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800045c:	430a      	orrs	r2, r1
 800045e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000462:	b2bc      	uxth	r4, r7
 8000464:	fb0e 3318 	mls	r3, lr, r8, r3
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb08 f904 	mul.w	r9, r8, r4
 8000472:	40b0      	lsls	r0, r6
 8000474:	4589      	cmp	r9, r1
 8000476:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800047a:	b280      	uxth	r0, r0
 800047c:	d93e      	bls.n	80004fc <__udivmoddi4+0x2e8>
 800047e:	1879      	adds	r1, r7, r1
 8000480:	f108 3cff 	add.w	ip, r8, #4294967295
 8000484:	d201      	bcs.n	800048a <__udivmoddi4+0x276>
 8000486:	4589      	cmp	r9, r1
 8000488:	d81f      	bhi.n	80004ca <__udivmoddi4+0x2b6>
 800048a:	eba1 0109 	sub.w	r1, r1, r9
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fb09 f804 	mul.w	r8, r9, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	b292      	uxth	r2, r2
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d229      	bcs.n	80004f8 <__udivmoddi4+0x2e4>
 80004a4:	18ba      	adds	r2, r7, r2
 80004a6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004aa:	d2c4      	bcs.n	8000436 <__udivmoddi4+0x222>
 80004ac:	4542      	cmp	r2, r8
 80004ae:	d2c2      	bcs.n	8000436 <__udivmoddi4+0x222>
 80004b0:	f1a9 0102 	sub.w	r1, r9, #2
 80004b4:	443a      	add	r2, r7
 80004b6:	e7be      	b.n	8000436 <__udivmoddi4+0x222>
 80004b8:	45f0      	cmp	r8, lr
 80004ba:	d29d      	bcs.n	80003f8 <__udivmoddi4+0x1e4>
 80004bc:	ebbe 0302 	subs.w	r3, lr, r2
 80004c0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c4:	3801      	subs	r0, #1
 80004c6:	46e1      	mov	r9, ip
 80004c8:	e796      	b.n	80003f8 <__udivmoddi4+0x1e4>
 80004ca:	eba7 0909 	sub.w	r9, r7, r9
 80004ce:	4449      	add	r1, r9
 80004d0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d8:	fb09 f804 	mul.w	r8, r9, r4
 80004dc:	e7db      	b.n	8000496 <__udivmoddi4+0x282>
 80004de:	4673      	mov	r3, lr
 80004e0:	e77f      	b.n	80003e2 <__udivmoddi4+0x1ce>
 80004e2:	4650      	mov	r0, sl
 80004e4:	e766      	b.n	80003b4 <__udivmoddi4+0x1a0>
 80004e6:	4608      	mov	r0, r1
 80004e8:	e6fd      	b.n	80002e6 <__udivmoddi4+0xd2>
 80004ea:	443b      	add	r3, r7
 80004ec:	3a02      	subs	r2, #2
 80004ee:	e733      	b.n	8000358 <__udivmoddi4+0x144>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	443b      	add	r3, r7
 80004f6:	e71c      	b.n	8000332 <__udivmoddi4+0x11e>
 80004f8:	4649      	mov	r1, r9
 80004fa:	e79c      	b.n	8000436 <__udivmoddi4+0x222>
 80004fc:	eba1 0109 	sub.w	r1, r1, r9
 8000500:	46c4      	mov	ip, r8
 8000502:	fbb1 f9fe 	udiv	r9, r1, lr
 8000506:	fb09 f804 	mul.w	r8, r9, r4
 800050a:	e7c4      	b.n	8000496 <__udivmoddi4+0x282>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fbd7 	bl	8000cc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f83b 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 f91d 	bl	800075c <MX_GPIO_Init>
  MX_DMA_Init();
 8000522:	f000 f8fb 	bl	800071c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000526:	f000 f8cf 	bl	80006c8 <MX_USART2_UART_Init>
  MX_I2S2_Init();
 800052a:	f000 f89f 	bl	800066c <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */
	const char *hello = "UART OK\r\n";
 800052e:	4b14      	ldr	r3, [pc, #80]	@ (8000580 <main+0x70>)
 8000530:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) hello, strlen(hello),
 8000532:	6878      	ldr	r0, [r7, #4]
 8000534:	f7ff fe4e 	bl	80001d4 <strlen>
 8000538:	4603      	mov	r3, r0
 800053a:	b29a      	uxth	r2, r3
 800053c:	f04f 33ff 	mov.w	r3, #4294967295
 8000540:	6879      	ldr	r1, [r7, #4]
 8000542:	4810      	ldr	r0, [pc, #64]	@ (8000584 <main+0x74>)
 8000544:	f002 fe72 	bl	800322c <HAL_UART_Transmit>
	HAL_MAX_DELAY);

	/* 3) Start I2S → DMA in circular mode */
	HAL_I2S_Receive_DMA(&hi2s2, i2s_dma_buffer,
 8000548:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800054c:	490e      	ldr	r1, [pc, #56]	@ (8000588 <main+0x78>)
 800054e:	480f      	ldr	r0, [pc, #60]	@ (800058c <main+0x7c>)
 8000550:	f001 fbca 	bl	8001ce8 <HAL_I2S_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	/* ... Init ... */
	HAL_I2S_Receive_DMA(&hi2s2, i2s_dma_buffer, DMA_BUFFER_SIZE * 2);
 8000554:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000558:	490b      	ldr	r1, [pc, #44]	@ (8000588 <main+0x78>)
 800055a:	480c      	ldr	r0, [pc, #48]	@ (800058c <main+0x7c>)
 800055c:	f001 fbc4 	bl	8001ce8 <HAL_I2S_Receive_DMA>

	while (1) {
		if (buffer1_ready) {
 8000560:	4b0b      	ldr	r3, [pc, #44]	@ (8000590 <main+0x80>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	b2db      	uxtb	r3, r3
 8000566:	2b00      	cmp	r3, #0
 8000568:	d0fa      	beq.n	8000560 <main+0x50>
			buffer1_ready = false;
 800056a:	4b09      	ldr	r3, [pc, #36]	@ (8000590 <main+0x80>)
 800056c:	2200      	movs	r2, #0
 800056e:	701a      	strb	r2, [r3, #0]
			// Send the binary data stored in processed_data
			send_buffer_over_uart();
 8000570:	f000 f9a6 	bl	80008c0 <send_buffer_over_uart>
			print_processed_bits(HALF_BUFFER_SIZE, 5);
 8000574:	2105      	movs	r1, #5
 8000576:	2080      	movs	r0, #128	@ 0x80
 8000578:	f000 f95e 	bl	8000838 <print_processed_bits>
		if (buffer1_ready) {
 800057c:	e7f0      	b.n	8000560 <main+0x50>
 800057e:	bf00      	nop
 8000580:	08003a14 	.word	0x08003a14
 8000584:	200000d0 	.word	0x200000d0
 8000588:	20000118 	.word	0x20000118
 800058c:	20000028 	.word	0x20000028
 8000590:	20000718 	.word	0x20000718

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b094      	sub	sp, #80	@ 0x50
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 0320 	add.w	r3, r7, #32
 800059e:	2230      	movs	r2, #48	@ 0x30
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f003 f9fe 	bl	80039a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	4b29      	ldr	r3, [pc, #164]	@ (8000664 <SystemClock_Config+0xd0>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c0:	4a28      	ldr	r2, [pc, #160]	@ (8000664 <SystemClock_Config+0xd0>)
 80005c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005c8:	4b26      	ldr	r3, [pc, #152]	@ (8000664 <SystemClock_Config+0xd0>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005d4:	2300      	movs	r3, #0
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	4b23      	ldr	r3, [pc, #140]	@ (8000668 <SystemClock_Config+0xd4>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005e0:	4a21      	ldr	r2, [pc, #132]	@ (8000668 <SystemClock_Config+0xd4>)
 80005e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000668 <SystemClock_Config+0xd4>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f4:	2302      	movs	r3, #2
 80005f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f8:	2301      	movs	r3, #1
 80005fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005fc:	2310      	movs	r3, #16
 80005fe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000600:	2302      	movs	r3, #2
 8000602:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000604:	2300      	movs	r3, #0
 8000606:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000608:	2310      	movs	r3, #16
 800060a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800060c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000610:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000612:	2304      	movs	r3, #4
 8000614:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000616:	2307      	movs	r3, #7
 8000618:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061a:	f107 0320 	add.w	r3, r7, #32
 800061e:	4618      	mov	r0, r3
 8000620:	f001 ffce 	bl	80025c0 <HAL_RCC_OscConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800062a:	f000 f9a3 	bl	8000974 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062e:	230f      	movs	r3, #15
 8000630:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000632:	2302      	movs	r3, #2
 8000634:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800063a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800063e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	2102      	movs	r1, #2
 800064a:	4618      	mov	r0, r3
 800064c:	f002 fa30 	bl	8002ab0 <HAL_RCC_ClockConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000656:	f000 f98d 	bl	8000974 <Error_Handler>
  }
}
 800065a:	bf00      	nop
 800065c:	3750      	adds	r7, #80	@ 0x50
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40023800 	.word	0x40023800
 8000668:	40007000 	.word	0x40007000

0800066c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000670:	4b13      	ldr	r3, [pc, #76]	@ (80006c0 <MX_I2S2_Init+0x54>)
 8000672:	4a14      	ldr	r2, [pc, #80]	@ (80006c4 <MX_I2S2_Init+0x58>)
 8000674:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8000676:	4b12      	ldr	r3, [pc, #72]	@ (80006c0 <MX_I2S2_Init+0x54>)
 8000678:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800067c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800067e:	4b10      	ldr	r3, [pc, #64]	@ (80006c0 <MX_I2S2_Init+0x54>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000684:	4b0e      	ldr	r3, [pc, #56]	@ (80006c0 <MX_I2S2_Init+0x54>)
 8000686:	2203      	movs	r2, #3
 8000688:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800068a:	4b0d      	ldr	r3, [pc, #52]	@ (80006c0 <MX_I2S2_Init+0x54>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 8000690:	4b0b      	ldr	r3, [pc, #44]	@ (80006c0 <MX_I2S2_Init+0x54>)
 8000692:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000696:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000698:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <MX_I2S2_Init+0x54>)
 800069a:	2200      	movs	r2, #0
 800069c:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800069e:	4b08      	ldr	r3, [pc, #32]	@ (80006c0 <MX_I2S2_Init+0x54>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006a4:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <MX_I2S2_Init+0x54>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80006aa:	4805      	ldr	r0, [pc, #20]	@ (80006c0 <MX_I2S2_Init+0x54>)
 80006ac:	f001 f9dc 	bl	8001a68 <HAL_I2S_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80006b6:	f000 f95d 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000028 	.word	0x20000028
 80006c4:	40003800 	.word	0x40003800

080006c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006cc:	4b11      	ldr	r3, [pc, #68]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006ce:	4a12      	ldr	r2, [pc, #72]	@ (8000718 <MX_USART2_UART_Init+0x50>)
 80006d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 80006d2:	4b10      	ldr	r3, [pc, #64]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006d4:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80006d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006da:	4b0e      	ldr	r3, [pc, #56]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006ec:	4b09      	ldr	r3, [pc, #36]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006ee:	220c      	movs	r2, #12
 80006f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f2:	4b08      	ldr	r3, [pc, #32]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f8:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006fe:	4805      	ldr	r0, [pc, #20]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 8000700:	f002 fd44 	bl	800318c <HAL_UART_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800070a:	f000 f933 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	200000d0 	.word	0x200000d0
 8000718:	40004400 	.word	0x40004400

0800071c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	4b0c      	ldr	r3, [pc, #48]	@ (8000758 <MX_DMA_Init+0x3c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	4a0b      	ldr	r2, [pc, #44]	@ (8000758 <MX_DMA_Init+0x3c>)
 800072c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000730:	6313      	str	r3, [r2, #48]	@ 0x30
 8000732:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <MX_DMA_Init+0x3c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	2100      	movs	r1, #0
 8000742:	200e      	movs	r0, #14
 8000744:	f000 fc31 	bl	8000faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000748:	200e      	movs	r0, #14
 800074a:	f000 fc4a 	bl	8000fe2 <HAL_NVIC_EnableIRQ>

}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	@ 0x28
 8000760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	4b2d      	ldr	r3, [pc, #180]	@ (800082c <MX_GPIO_Init+0xd0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a2c      	ldr	r2, [pc, #176]	@ (800082c <MX_GPIO_Init+0xd0>)
 800077c:	f043 0304 	orr.w	r3, r3, #4
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b2a      	ldr	r3, [pc, #168]	@ (800082c <MX_GPIO_Init+0xd0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0304 	and.w	r3, r3, #4
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	4b26      	ldr	r3, [pc, #152]	@ (800082c <MX_GPIO_Init+0xd0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	4a25      	ldr	r2, [pc, #148]	@ (800082c <MX_GPIO_Init+0xd0>)
 8000798:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800079c:	6313      	str	r3, [r2, #48]	@ 0x30
 800079e:	4b23      	ldr	r3, [pc, #140]	@ (800082c <MX_GPIO_Init+0xd0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b1f      	ldr	r3, [pc, #124]	@ (800082c <MX_GPIO_Init+0xd0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	4a1e      	ldr	r2, [pc, #120]	@ (800082c <MX_GPIO_Init+0xd0>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ba:	4b1c      	ldr	r3, [pc, #112]	@ (800082c <MX_GPIO_Init+0xd0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b18      	ldr	r3, [pc, #96]	@ (800082c <MX_GPIO_Init+0xd0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	4a17      	ldr	r2, [pc, #92]	@ (800082c <MX_GPIO_Init+0xd0>)
 80007d0:	f043 0302 	orr.w	r3, r3, #2
 80007d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d6:	4b15      	ldr	r3, [pc, #84]	@ (800082c <MX_GPIO_Init+0xd0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	f003 0302 	and.w	r3, r3, #2
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2120      	movs	r1, #32
 80007e6:	4812      	ldr	r0, [pc, #72]	@ (8000830 <MX_GPIO_Init+0xd4>)
 80007e8:	f001 f90a 	bl	8001a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007f2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	4619      	mov	r1, r3
 8000802:	480c      	ldr	r0, [pc, #48]	@ (8000834 <MX_GPIO_Init+0xd8>)
 8000804:	f000 ff78 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8000808:	2320      	movs	r3, #32
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080c:	2301      	movs	r3, #1
 800080e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	4619      	mov	r1, r3
 800081e:	4804      	ldr	r0, [pc, #16]	@ (8000830 <MX_GPIO_Init+0xd4>)
 8000820:	f000 ff6a 	bl	80016f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000824:	bf00      	nop
 8000826:	3728      	adds	r7, #40	@ 0x28
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40023800 	.word	0x40023800
 8000830:	40020000 	.word	0x40020000
 8000834:	40020800 	.word	0x40020800

08000838 <print_processed_bits>:
		ITM_PORT0_CH0() = '\r';
		ITM_PORT0_CH0() = '\n';
		HAL_Delay(5);
	}
}
void print_processed_bits(int offset, int count) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
// For each sample in the half-buffer
	for (int i = 0; i < count; ++i) {
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
 8000846:	e030      	b.n	80008aa <print_processed_bits+0x72>
		int32_t sample = processed_data[offset + i];
 8000848:	687a      	ldr	r2, [r7, #4]
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	4413      	add	r3, r2
 800084e:	4a1b      	ldr	r2, [pc, #108]	@ (80008bc <print_processed_bits+0x84>)
 8000850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000854:	60fb      	str	r3, [r7, #12]

		// Print bits 23 down to 0 (MSB of 24-bit word first)
		for (int b = 23; b >= 0; --b) {
 8000856:	2317      	movs	r3, #23
 8000858:	613b      	str	r3, [r7, #16]
 800085a:	e015      	b.n	8000888 <print_processed_bits+0x50>
			uint8_t c = ((sample >> b) & 1) ? '1' : '0';
 800085c:	68fa      	ldr	r2, [r7, #12]
 800085e:	693b      	ldr	r3, [r7, #16]
 8000860:	fa42 f303 	asr.w	r3, r2, r3
 8000864:	f003 0301 	and.w	r3, r3, #1
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <print_processed_bits+0x38>
 800086c:	2331      	movs	r3, #49	@ 0x31
 800086e:	e000      	b.n	8000872 <print_processed_bits+0x3a>
 8000870:	2330      	movs	r3, #48	@ 0x30
 8000872:	72fb      	strb	r3, [r7, #11]
			ITM_PORT0_CH0() = c;
 8000874:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000878:	7afb      	ldrb	r3, [r7, #11]
 800087a:	7013      	strb	r3, [r2, #0]
			HAL_Delay(1);
 800087c:	2001      	movs	r0, #1
 800087e:	f000 fa95 	bl	8000dac <HAL_Delay>
		for (int b = 23; b >= 0; --b) {
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	3b01      	subs	r3, #1
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]
 800088a:	2b00      	cmp	r3, #0
 800088c:	dae6      	bge.n	800085c <print_processed_bits+0x24>
		}
		// CRLF after each sample
		ITM_PORT0_CH0() = '\r';
 800088e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000892:	220d      	movs	r2, #13
 8000894:	701a      	strb	r2, [r3, #0]
		ITM_PORT0_CH0() = '\n';
 8000896:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800089a:	220a      	movs	r2, #10
 800089c:	701a      	strb	r2, [r3, #0]
		HAL_Delay(5);
 800089e:	2005      	movs	r0, #5
 80008a0:	f000 fa84 	bl	8000dac <HAL_Delay>
	for (int i = 0; i < count; ++i) {
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	3301      	adds	r3, #1
 80008a8:	617b      	str	r3, [r7, #20]
 80008aa:	697a      	ldr	r2, [r7, #20]
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	429a      	cmp	r2, r3
 80008b0:	dbca      	blt.n	8000848 <print_processed_bits+0x10>
	}
}
 80008b2:	bf00      	nop
 80008b4:	bf00      	nop
 80008b6:	3718      	adds	r7, #24
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000518 	.word	0x20000518

080008c0 <send_buffer_over_uart>:

void send_buffer_over_uart(void) { // No offset argument
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0

// Calculate the total number of *bytes* to send
// We send the entire content of processed_data (128 * int32_t)
	uint32_t bytes_to_send = HALF_BUFFER_SIZE * sizeof(int32_t); // 128 * 4 = 512 bytes
 80008c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008ca:	607b      	str	r3, [r7, #4]

// Transmit the raw binary data directly from the processed_data buffer
// Cast the int32_t* pointer to the uint8_t* needed by HAL_UART_Transmit
	HAL_UART_Transmit(&huart2, (uint8_t*) processed_data, // Pointer to the data buffer
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	b29a      	uxth	r2, r3
 80008d0:	f04f 33ff 	mov.w	r3, #4294967295
 80008d4:	4905      	ldr	r1, [pc, #20]	@ (80008ec <send_buffer_over_uart+0x2c>)
 80008d6:	4806      	ldr	r0, [pc, #24]	@ (80008f0 <send_buffer_over_uart+0x30>)
 80008d8:	f002 fca8 	bl	800322c <HAL_UART_Transmit>
			bytes_to_send,           // Total number of bytes
			HAL_MAX_DELAY);          // Timeout

	HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
 80008dc:	2120      	movs	r1, #32
 80008de:	4805      	ldr	r0, [pc, #20]	@ (80008f4 <send_buffer_over_uart+0x34>)
 80008e0:	f001 f8a7 	bl	8001a32 <HAL_GPIO_TogglePin>
}
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000518 	.word	0x20000518
 80008f0:	200000d0 	.word	0x200000d0
 80008f4:	40020000 	.word	0x40020000

080008f8 <HAL_I2S_RxCpltCallback>:

/* I2S full-buffer ISR: process second 128 samples */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 80008f8:	b480      	push	{r7}
 80008fa:	b087      	sub	sp, #28
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	if (hi2s->Instance == SPI2) {
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a17      	ldr	r2, [pc, #92]	@ (8000964 <HAL_I2S_RxCpltCallback+0x6c>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d126      	bne.n	8000958 <HAL_I2S_RxCpltCallback+0x60>
		for (int s = 0; s < HALF_BUFFER_SIZE; ++s) { // Loop 128 times
 800090a:	2300      	movs	r3, #0
 800090c:	617b      	str	r3, [r7, #20]
 800090e:	e01d      	b.n	800094c <HAL_I2S_RxCpltCallback+0x54>
			// Read from SECOND half of i2s_dma_buffer
			uint16_t lo = ((uint16_t*) i2s_dma_buffer)[2
					* (s + HALF_BUFFER_SIZE)];
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	3380      	adds	r3, #128	@ 0x80
			uint16_t lo = ((uint16_t*) i2s_dma_buffer)[2
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	4a14      	ldr	r2, [pc, #80]	@ (8000968 <HAL_I2S_RxCpltCallback+0x70>)
 8000918:	4413      	add	r3, r2
 800091a:	881b      	ldrh	r3, [r3, #0]
 800091c:	827b      	strh	r3, [r7, #18]
			uint16_t hi = ((uint16_t*) i2s_dma_buffer)[2
					* (s + HALF_BUFFER_SIZE) + 1];
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	3380      	adds	r3, #128	@ 0x80
			uint16_t hi = ((uint16_t*) i2s_dma_buffer)[2
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	3302      	adds	r3, #2
 8000926:	4a10      	ldr	r2, [pc, #64]	@ (8000968 <HAL_I2S_RxCpltCallback+0x70>)
 8000928:	4413      	add	r3, r2
 800092a:	881b      	ldrh	r3, [r3, #0]
 800092c:	823b      	strh	r3, [r7, #16]
			uint32_t raw = ((uint32_t) hi << 16) | lo;
 800092e:	8a3b      	ldrh	r3, [r7, #16]
 8000930:	041a      	lsls	r2, r3, #16
 8000932:	8a7b      	ldrh	r3, [r7, #18]
 8000934:	4313      	orrs	r3, r2
 8000936:	60fb      	str	r3, [r7, #12]
			// Store sign-extended result in processed_data[0..127]
			processed_data[s] = ((int32_t) (raw << 8)) >> 8;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	021b      	lsls	r3, r3, #8
 800093c:	121a      	asrs	r2, r3, #8
 800093e:	490b      	ldr	r1, [pc, #44]	@ (800096c <HAL_I2S_RxCpltCallback+0x74>)
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int s = 0; s < HALF_BUFFER_SIZE; ++s) { // Loop 128 times
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	3301      	adds	r3, #1
 800094a:	617b      	str	r3, [r7, #20]
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000950:	ddde      	ble.n	8000910 <HAL_I2S_RxCpltCallback+0x18>
//			print_dma_bits(HALF_BUFFER_SIZE, s);
//			print_processed_bits(HALF_BUFFER_SIZE, s);
		}
		buffer1_ready = true;
 8000952:	4b07      	ldr	r3, [pc, #28]	@ (8000970 <HAL_I2S_RxCpltCallback+0x78>)
 8000954:	2201      	movs	r2, #1
 8000956:	701a      	strb	r2, [r3, #0]
	}
}
 8000958:	bf00      	nop
 800095a:	371c      	adds	r7, #28
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	40003800 	.word	0x40003800
 8000968:	20000118 	.word	0x20000118
 800096c:	20000518 	.word	0x20000518
 8000970:	20000718 	.word	0x20000718

08000974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000978:	b672      	cpsid	i
}
 800097a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
//__disable_irq();
	__disable_irq();
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET); // Turn on LED for error
 800097c:	2201      	movs	r2, #1
 800097e:	2120      	movs	r1, #32
 8000980:	4802      	ldr	r0, [pc, #8]	@ (800098c <Error_Handler+0x18>)
 8000982:	f001 f83d 	bl	8001a00 <HAL_GPIO_WritePin>
	while (1) {
 8000986:	bf00      	nop
 8000988:	e7fd      	b.n	8000986 <Error_Handler+0x12>
 800098a:	bf00      	nop
 800098c:	40020000 	.word	0x40020000

08000990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	4b10      	ldr	r3, [pc, #64]	@ (80009dc <HAL_MspInit+0x4c>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800099e:	4a0f      	ldr	r2, [pc, #60]	@ (80009dc <HAL_MspInit+0x4c>)
 80009a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009a6:	4b0d      	ldr	r3, [pc, #52]	@ (80009dc <HAL_MspInit+0x4c>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	603b      	str	r3, [r7, #0]
 80009b6:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <HAL_MspInit+0x4c>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ba:	4a08      	ldr	r2, [pc, #32]	@ (80009dc <HAL_MspInit+0x4c>)
 80009bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009c2:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <HAL_MspInit+0x4c>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800

080009e0 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b090      	sub	sp, #64	@ 0x40
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009f8:	f107 0318 	add.w	r3, r7, #24
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a49      	ldr	r2, [pc, #292]	@ (8000b34 <HAL_I2S_MspInit+0x154>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	f040 808c 	bne.w	8000b2c <HAL_I2S_MspInit+0x14c>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a14:	2301      	movs	r3, #1
 8000a16:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a18:	23c0      	movs	r3, #192	@ 0xc0
 8000a1a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a20:	f107 0318 	add.w	r3, r7, #24
 8000a24:	4618      	mov	r0, r3
 8000a26:	f002 fa63 	bl	8002ef0 <HAL_RCCEx_PeriphCLKConfig>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <HAL_I2S_MspInit+0x54>
    {
      Error_Handler();
 8000a30:	f7ff ffa0 	bl	8000974 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	4b3f      	ldr	r3, [pc, #252]	@ (8000b38 <HAL_I2S_MspInit+0x158>)
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3c:	4a3e      	ldr	r2, [pc, #248]	@ (8000b38 <HAL_I2S_MspInit+0x158>)
 8000a3e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a42:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a44:	4b3c      	ldr	r3, [pc, #240]	@ (8000b38 <HAL_I2S_MspInit+0x158>)
 8000a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a4c:	617b      	str	r3, [r7, #20]
 8000a4e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a50:	2300      	movs	r3, #0
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	4b38      	ldr	r3, [pc, #224]	@ (8000b38 <HAL_I2S_MspInit+0x158>)
 8000a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a58:	4a37      	ldr	r2, [pc, #220]	@ (8000b38 <HAL_I2S_MspInit+0x158>)
 8000a5a:	f043 0304 	orr.w	r3, r3, #4
 8000a5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a60:	4b35      	ldr	r3, [pc, #212]	@ (8000b38 <HAL_I2S_MspInit+0x158>)
 8000a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a64:	f003 0304 	and.w	r3, r3, #4
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	4b31      	ldr	r3, [pc, #196]	@ (8000b38 <HAL_I2S_MspInit+0x158>)
 8000a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a74:	4a30      	ldr	r2, [pc, #192]	@ (8000b38 <HAL_I2S_MspInit+0x158>)
 8000a76:	f043 0302 	orr.w	r3, r3, #2
 8000a7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7c:	4b2e      	ldr	r3, [pc, #184]	@ (8000b38 <HAL_I2S_MspInit+0x158>)
 8000a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a80:	f003 0302 	and.w	r3, r3, #2
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a88:	2308      	movs	r3, #8
 8000a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a98:	2305      	movs	r3, #5
 8000a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4826      	ldr	r0, [pc, #152]	@ (8000b3c <HAL_I2S_MspInit+0x15c>)
 8000aa4:	f000 fe28 	bl	80016f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000aa8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000aba:	2305      	movs	r3, #5
 8000abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000abe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	481e      	ldr	r0, [pc, #120]	@ (8000b40 <HAL_I2S_MspInit+0x160>)
 8000ac6:	f000 fe17 	bl	80016f8 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8000aca:	4b1e      	ldr	r3, [pc, #120]	@ (8000b44 <HAL_I2S_MspInit+0x164>)
 8000acc:	4a1e      	ldr	r2, [pc, #120]	@ (8000b48 <HAL_I2S_MspInit+0x168>)
 8000ace:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8000ad0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b44 <HAL_I2S_MspInit+0x164>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ad6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b44 <HAL_I2S_MspInit+0x164>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000adc:	4b19      	ldr	r3, [pc, #100]	@ (8000b44 <HAL_I2S_MspInit+0x164>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ae2:	4b18      	ldr	r3, [pc, #96]	@ (8000b44 <HAL_I2S_MspInit+0x164>)
 8000ae4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ae8:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000aea:	4b16      	ldr	r3, [pc, #88]	@ (8000b44 <HAL_I2S_MspInit+0x164>)
 8000aec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000af0:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000af2:	4b14      	ldr	r3, [pc, #80]	@ (8000b44 <HAL_I2S_MspInit+0x164>)
 8000af4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000af8:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8000afa:	4b12      	ldr	r3, [pc, #72]	@ (8000b44 <HAL_I2S_MspInit+0x164>)
 8000afc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b00:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000b02:	4b10      	ldr	r3, [pc, #64]	@ (8000b44 <HAL_I2S_MspInit+0x164>)
 8000b04:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000b08:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b44 <HAL_I2S_MspInit+0x164>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000b10:	480c      	ldr	r0, [pc, #48]	@ (8000b44 <HAL_I2S_MspInit+0x164>)
 8000b12:	f000 fa81 	bl	8001018 <HAL_DMA_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <HAL_I2S_MspInit+0x140>
    {
      Error_Handler();
 8000b1c:	f7ff ff2a 	bl	8000974 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a08      	ldr	r2, [pc, #32]	@ (8000b44 <HAL_I2S_MspInit+0x164>)
 8000b24:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b26:	4a07      	ldr	r2, [pc, #28]	@ (8000b44 <HAL_I2S_MspInit+0x164>)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000b2c:	bf00      	nop
 8000b2e:	3740      	adds	r7, #64	@ 0x40
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40003800 	.word	0x40003800
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40020800 	.word	0x40020800
 8000b40:	40020400 	.word	0x40020400
 8000b44:	20000070 	.word	0x20000070
 8000b48:	40026058 	.word	0x40026058

08000b4c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08a      	sub	sp, #40	@ 0x28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a19      	ldr	r2, [pc, #100]	@ (8000bd0 <HAL_UART_MspInit+0x84>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d12b      	bne.n	8000bc6 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	4b18      	ldr	r3, [pc, #96]	@ (8000bd4 <HAL_UART_MspInit+0x88>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b76:	4a17      	ldr	r2, [pc, #92]	@ (8000bd4 <HAL_UART_MspInit+0x88>)
 8000b78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b7e:	4b15      	ldr	r3, [pc, #84]	@ (8000bd4 <HAL_UART_MspInit+0x88>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	4b11      	ldr	r3, [pc, #68]	@ (8000bd4 <HAL_UART_MspInit+0x88>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b92:	4a10      	ldr	r2, [pc, #64]	@ (8000bd4 <HAL_UART_MspInit+0x88>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd4 <HAL_UART_MspInit+0x88>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ba6:	230c      	movs	r3, #12
 8000ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	2302      	movs	r3, #2
 8000bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bb6:	2307      	movs	r3, #7
 8000bb8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4805      	ldr	r0, [pc, #20]	@ (8000bd8 <HAL_UART_MspInit+0x8c>)
 8000bc2:	f000 fd99 	bl	80016f8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000bc6:	bf00      	nop
 8000bc8:	3728      	adds	r7, #40	@ 0x28
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40004400 	.word	0x40004400
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020000 	.word	0x40020000

08000bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <NMI_Handler+0x4>

08000be4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <HardFault_Handler+0x4>

08000bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <MemManage_Handler+0x4>

08000bf4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <BusFault_Handler+0x4>

08000bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <UsageFault_Handler+0x4>

08000c04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c32:	f000 f89b 	bl	8000d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000c40:	4802      	ldr	r0, [pc, #8]	@ (8000c4c <DMA1_Stream3_IRQHandler+0x10>)
 8000c42:	f000 faef 	bl	8001224 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000070 	.word	0x20000070

08000c50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c54:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <SystemInit+0x20>)
 8000c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c5a:	4a05      	ldr	r2, [pc, #20]	@ (8000c70 <SystemInit+0x20>)
 8000c5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 8000c74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c78:	f7ff ffea 	bl	8000c50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c7c:	480c      	ldr	r0, [pc, #48]	@ (8000cb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c7e:	490d      	ldr	r1, [pc, #52]	@ (8000cb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c80:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c84:	e002      	b.n	8000c8c <LoopCopyDataInit>

08000c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8a:	3304      	adds	r3, #4

08000c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c90:	d3f9      	bcc.n	8000c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c92:	4a0a      	ldr	r2, [pc, #40]	@ (8000cbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c94:	4c0a      	ldr	r4, [pc, #40]	@ (8000cc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c98:	e001      	b.n	8000c9e <LoopFillZerobss>

08000c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c9c:	3204      	adds	r2, #4

08000c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca0:	d3fb      	bcc.n	8000c9a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000ca2:	f002 fe87 	bl	80039b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ca6:	f7ff fc33 	bl	8000510 <main>
  bx  lr    
 8000caa:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 8000cac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cb8:	08003a50 	.word	0x08003a50
  ldr r2, =_sbss
 8000cbc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cc0:	20000720 	.word	0x20000720

08000cc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc4:	e7fe      	b.n	8000cc4 <ADC_IRQHandler>
	...

08000cc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8000d08 <HAL_Init+0x40>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d08 <HAL_Init+0x40>)
 8000cd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d08 <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0a      	ldr	r2, [pc, #40]	@ (8000d08 <HAL_Init+0x40>)
 8000cde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce4:	4b08      	ldr	r3, [pc, #32]	@ (8000d08 <HAL_Init+0x40>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a07      	ldr	r2, [pc, #28]	@ (8000d08 <HAL_Init+0x40>)
 8000cea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf0:	2003      	movs	r0, #3
 8000cf2:	f000 f94f 	bl	8000f94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f000 f808 	bl	8000d0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cfc:	f7ff fe48 	bl	8000990 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40023c00 	.word	0x40023c00

08000d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d14:	4b12      	ldr	r3, [pc, #72]	@ (8000d60 <HAL_InitTick+0x54>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4b12      	ldr	r3, [pc, #72]	@ (8000d64 <HAL_InitTick+0x58>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 f967 	bl	8000ffe <HAL_SYSTICK_Config>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e00e      	b.n	8000d58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2b0f      	cmp	r3, #15
 8000d3e:	d80a      	bhi.n	8000d56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d40:	2200      	movs	r2, #0
 8000d42:	6879      	ldr	r1, [r7, #4]
 8000d44:	f04f 30ff 	mov.w	r0, #4294967295
 8000d48:	f000 f92f 	bl	8000faa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d4c:	4a06      	ldr	r2, [pc, #24]	@ (8000d68 <HAL_InitTick+0x5c>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d52:	2300      	movs	r3, #0
 8000d54:	e000      	b.n	8000d58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000000 	.word	0x20000000
 8000d64:	20000008 	.word	0x20000008
 8000d68:	20000004 	.word	0x20000004

08000d6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d70:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <HAL_IncTick+0x20>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	461a      	mov	r2, r3
 8000d76:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <HAL_IncTick+0x24>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	4a04      	ldr	r2, [pc, #16]	@ (8000d90 <HAL_IncTick+0x24>)
 8000d7e:	6013      	str	r3, [r2, #0]
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	20000008 	.word	0x20000008
 8000d90:	2000071c 	.word	0x2000071c

08000d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return uwTick;
 8000d98:	4b03      	ldr	r3, [pc, #12]	@ (8000da8 <HAL_GetTick+0x14>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	2000071c 	.word	0x2000071c

08000dac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db4:	f7ff ffee 	bl	8000d94 <HAL_GetTick>
 8000db8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dc4:	d005      	beq.n	8000dd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000df0 <HAL_Delay+0x44>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	4413      	add	r3, r2
 8000dd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dd2:	bf00      	nop
 8000dd4:	f7ff ffde 	bl	8000d94 <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d8f7      	bhi.n	8000dd4 <HAL_Delay+0x28>
  {
  }
}
 8000de4:	bf00      	nop
 8000de6:	bf00      	nop
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000008 	.word	0x20000008

08000df4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e04:	4b0c      	ldr	r3, [pc, #48]	@ (8000e38 <__NVIC_SetPriorityGrouping+0x44>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e0a:	68ba      	ldr	r2, [r7, #8]
 8000e0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e10:	4013      	ands	r3, r2
 8000e12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e26:	4a04      	ldr	r2, [pc, #16]	@ (8000e38 <__NVIC_SetPriorityGrouping+0x44>)
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	60d3      	str	r3, [r2, #12]
}
 8000e2c:	bf00      	nop
 8000e2e:	3714      	adds	r7, #20
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e40:	4b04      	ldr	r3, [pc, #16]	@ (8000e54 <__NVIC_GetPriorityGrouping+0x18>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	0a1b      	lsrs	r3, r3, #8
 8000e46:	f003 0307 	and.w	r3, r3, #7
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	db0b      	blt.n	8000e82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	f003 021f 	and.w	r2, r3, #31
 8000e70:	4907      	ldr	r1, [pc, #28]	@ (8000e90 <__NVIC_EnableIRQ+0x38>)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	095b      	lsrs	r3, r3, #5
 8000e78:	2001      	movs	r0, #1
 8000e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	e000e100 	.word	0xe000e100

08000e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	6039      	str	r1, [r7, #0]
 8000e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	db0a      	blt.n	8000ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	490c      	ldr	r1, [pc, #48]	@ (8000ee0 <__NVIC_SetPriority+0x4c>)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	0112      	lsls	r2, r2, #4
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	440b      	add	r3, r1
 8000eb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ebc:	e00a      	b.n	8000ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4908      	ldr	r1, [pc, #32]	@ (8000ee4 <__NVIC_SetPriority+0x50>)
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	f003 030f 	and.w	r3, r3, #15
 8000eca:	3b04      	subs	r3, #4
 8000ecc:	0112      	lsls	r2, r2, #4
 8000ece:	b2d2      	uxtb	r2, r2
 8000ed0:	440b      	add	r3, r1
 8000ed2:	761a      	strb	r2, [r3, #24]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000e100 	.word	0xe000e100
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b089      	sub	sp, #36	@ 0x24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f1c3 0307 	rsb	r3, r3, #7
 8000f02:	2b04      	cmp	r3, #4
 8000f04:	bf28      	it	cs
 8000f06:	2304      	movcs	r3, #4
 8000f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	2b06      	cmp	r3, #6
 8000f10:	d902      	bls.n	8000f18 <NVIC_EncodePriority+0x30>
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3b03      	subs	r3, #3
 8000f16:	e000      	b.n	8000f1a <NVIC_EncodePriority+0x32>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43da      	mvns	r2, r3
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f30:	f04f 31ff 	mov.w	r1, #4294967295
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3a:	43d9      	mvns	r1, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	4313      	orrs	r3, r2
         );
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3724      	adds	r7, #36	@ 0x24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
	...

08000f50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f60:	d301      	bcc.n	8000f66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f62:	2301      	movs	r3, #1
 8000f64:	e00f      	b.n	8000f86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f66:	4a0a      	ldr	r2, [pc, #40]	@ (8000f90 <SysTick_Config+0x40>)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f6e:	210f      	movs	r1, #15
 8000f70:	f04f 30ff 	mov.w	r0, #4294967295
 8000f74:	f7ff ff8e 	bl	8000e94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f78:	4b05      	ldr	r3, [pc, #20]	@ (8000f90 <SysTick_Config+0x40>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f7e:	4b04      	ldr	r3, [pc, #16]	@ (8000f90 <SysTick_Config+0x40>)
 8000f80:	2207      	movs	r2, #7
 8000f82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	e000e010 	.word	0xe000e010

08000f94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff ff29 	bl	8000df4 <__NVIC_SetPriorityGrouping>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b086      	sub	sp, #24
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
 8000fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fbc:	f7ff ff3e 	bl	8000e3c <__NVIC_GetPriorityGrouping>
 8000fc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	68b9      	ldr	r1, [r7, #8]
 8000fc6:	6978      	ldr	r0, [r7, #20]
 8000fc8:	f7ff ff8e 	bl	8000ee8 <NVIC_EncodePriority>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff5d 	bl	8000e94 <__NVIC_SetPriority>
}
 8000fda:	bf00      	nop
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	4603      	mov	r3, r0
 8000fea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ff31 	bl	8000e58 <__NVIC_EnableIRQ>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff ffa2 	bl	8000f50 <SysTick_Config>
 800100c:	4603      	mov	r3, r0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001024:	f7ff feb6 	bl	8000d94 <HAL_GetTick>
 8001028:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d101      	bne.n	8001034 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	e099      	b.n	8001168 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2202      	movs	r2, #2
 8001038:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f022 0201 	bic.w	r2, r2, #1
 8001052:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001054:	e00f      	b.n	8001076 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001056:	f7ff fe9d 	bl	8000d94 <HAL_GetTick>
 800105a:	4602      	mov	r2, r0
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	2b05      	cmp	r3, #5
 8001062:	d908      	bls.n	8001076 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2220      	movs	r2, #32
 8001068:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2203      	movs	r2, #3
 800106e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001072:	2303      	movs	r3, #3
 8001074:	e078      	b.n	8001168 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	2b00      	cmp	r3, #0
 8001082:	d1e8      	bne.n	8001056 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800108c:	697a      	ldr	r2, [r7, #20]
 800108e:	4b38      	ldr	r3, [pc, #224]	@ (8001170 <HAL_DMA_Init+0x158>)
 8001090:	4013      	ands	r3, r2
 8001092:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685a      	ldr	r2, [r3, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	691b      	ldr	r3, [r3, #16]
 80010a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6a1b      	ldr	r3, [r3, #32]
 80010c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010c2:	697a      	ldr	r2, [r7, #20]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010cc:	2b04      	cmp	r3, #4
 80010ce:	d107      	bne.n	80010e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d8:	4313      	orrs	r3, r2
 80010da:	697a      	ldr	r2, [r7, #20]
 80010dc:	4313      	orrs	r3, r2
 80010de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	697a      	ldr	r2, [r7, #20]
 80010e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	f023 0307 	bic.w	r3, r3, #7
 80010f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010fc:	697a      	ldr	r2, [r7, #20]
 80010fe:	4313      	orrs	r3, r2
 8001100:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001106:	2b04      	cmp	r3, #4
 8001108:	d117      	bne.n	800113a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800110e:	697a      	ldr	r2, [r7, #20]
 8001110:	4313      	orrs	r3, r2
 8001112:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001118:	2b00      	cmp	r3, #0
 800111a:	d00e      	beq.n	800113a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f000 fa6f 	bl	8001600 <DMA_CheckFifoParam>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d008      	beq.n	800113a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2240      	movs	r2, #64	@ 0x40
 800112c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2201      	movs	r2, #1
 8001132:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001136:	2301      	movs	r3, #1
 8001138:	e016      	b.n	8001168 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f000 fa26 	bl	8001594 <DMA_CalcBaseAndBitshift>
 8001148:	4603      	mov	r3, r0
 800114a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001150:	223f      	movs	r2, #63	@ 0x3f
 8001152:	409a      	lsls	r2, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2201      	movs	r2, #1
 8001162:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001166:	2300      	movs	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	f010803f 	.word	0xf010803f

08001174 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
 8001180:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001182:	2300      	movs	r3, #0
 8001184:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800118a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001192:	2b01      	cmp	r3, #1
 8001194:	d101      	bne.n	800119a <HAL_DMA_Start_IT+0x26>
 8001196:	2302      	movs	r3, #2
 8001198:	e040      	b.n	800121c <HAL_DMA_Start_IT+0xa8>
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2201      	movs	r2, #1
 800119e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d12f      	bne.n	800120e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2202      	movs	r2, #2
 80011b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2200      	movs	r2, #0
 80011ba:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	68b9      	ldr	r1, [r7, #8]
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f000 f9b8 	bl	8001538 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011cc:	223f      	movs	r2, #63	@ 0x3f
 80011ce:	409a      	lsls	r2, r3
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f042 0216 	orr.w	r2, r2, #22
 80011e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d007      	beq.n	80011fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f042 0208 	orr.w	r2, r2, #8
 80011fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f042 0201 	orr.w	r2, r2, #1
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	e005      	b.n	800121a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2200      	movs	r2, #0
 8001212:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001216:	2302      	movs	r3, #2
 8001218:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800121a:	7dfb      	ldrb	r3, [r7, #23]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800122c:	2300      	movs	r3, #0
 800122e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001230:	4b8e      	ldr	r3, [pc, #568]	@ (800146c <HAL_DMA_IRQHandler+0x248>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a8e      	ldr	r2, [pc, #568]	@ (8001470 <HAL_DMA_IRQHandler+0x24c>)
 8001236:	fba2 2303 	umull	r2, r3, r2, r3
 800123a:	0a9b      	lsrs	r3, r3, #10
 800123c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001242:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800124e:	2208      	movs	r2, #8
 8001250:	409a      	lsls	r2, r3
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	4013      	ands	r3, r2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d01a      	beq.n	8001290 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0304 	and.w	r3, r3, #4
 8001264:	2b00      	cmp	r3, #0
 8001266:	d013      	beq.n	8001290 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 0204 	bic.w	r2, r2, #4
 8001276:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800127c:	2208      	movs	r2, #8
 800127e:	409a      	lsls	r2, r3
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001288:	f043 0201 	orr.w	r2, r3, #1
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001294:	2201      	movs	r2, #1
 8001296:	409a      	lsls	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4013      	ands	r3, r2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d012      	beq.n	80012c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d00b      	beq.n	80012c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012b2:	2201      	movs	r2, #1
 80012b4:	409a      	lsls	r2, r3
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012be:	f043 0202 	orr.w	r2, r3, #2
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012ca:	2204      	movs	r2, #4
 80012cc:	409a      	lsls	r2, r3
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	4013      	ands	r3, r2
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d012      	beq.n	80012fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d00b      	beq.n	80012fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012e8:	2204      	movs	r2, #4
 80012ea:	409a      	lsls	r2, r3
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012f4:	f043 0204 	orr.w	r2, r3, #4
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001300:	2210      	movs	r2, #16
 8001302:	409a      	lsls	r2, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4013      	ands	r3, r2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d043      	beq.n	8001394 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	2b00      	cmp	r3, #0
 8001318:	d03c      	beq.n	8001394 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800131e:	2210      	movs	r2, #16
 8001320:	409a      	lsls	r2, r3
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d018      	beq.n	8001366 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d108      	bne.n	8001354 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001346:	2b00      	cmp	r3, #0
 8001348:	d024      	beq.n	8001394 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	4798      	blx	r3
 8001352:	e01f      	b.n	8001394 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001358:	2b00      	cmp	r3, #0
 800135a:	d01b      	beq.n	8001394 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	4798      	blx	r3
 8001364:	e016      	b.n	8001394 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001370:	2b00      	cmp	r3, #0
 8001372:	d107      	bne.n	8001384 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f022 0208 	bic.w	r2, r2, #8
 8001382:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001398:	2220      	movs	r2, #32
 800139a:	409a      	lsls	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4013      	ands	r3, r2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f000 808f 	beq.w	80014c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0310 	and.w	r3, r3, #16
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f000 8087 	beq.w	80014c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013ba:	2220      	movs	r2, #32
 80013bc:	409a      	lsls	r2, r3
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b05      	cmp	r3, #5
 80013cc:	d136      	bne.n	800143c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f022 0216 	bic.w	r2, r2, #22
 80013dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	695a      	ldr	r2, [r3, #20]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80013ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d103      	bne.n	80013fe <HAL_DMA_IRQHandler+0x1da>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d007      	beq.n	800140e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f022 0208 	bic.w	r2, r2, #8
 800140c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001412:	223f      	movs	r2, #63	@ 0x3f
 8001414:	409a      	lsls	r2, r3
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2201      	movs	r2, #1
 800141e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800142e:	2b00      	cmp	r3, #0
 8001430:	d07e      	beq.n	8001530 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	4798      	blx	r3
        }
        return;
 800143a:	e079      	b.n	8001530 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d01d      	beq.n	8001486 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d10d      	bne.n	8001474 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800145c:	2b00      	cmp	r3, #0
 800145e:	d031      	beq.n	80014c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	4798      	blx	r3
 8001468:	e02c      	b.n	80014c4 <HAL_DMA_IRQHandler+0x2a0>
 800146a:	bf00      	nop
 800146c:	20000000 	.word	0x20000000
 8001470:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001478:	2b00      	cmp	r3, #0
 800147a:	d023      	beq.n	80014c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	4798      	blx	r3
 8001484:	e01e      	b.n	80014c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001490:	2b00      	cmp	r3, #0
 8001492:	d10f      	bne.n	80014b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f022 0210 	bic.w	r2, r2, #16
 80014a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2201      	movs	r2, #1
 80014a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d032      	beq.n	8001532 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d022      	beq.n	800151e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2205      	movs	r2, #5
 80014dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 0201 	bic.w	r2, r2, #1
 80014ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	3301      	adds	r3, #1
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	697a      	ldr	r2, [r7, #20]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d307      	bcc.n	800150c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1f2      	bne.n	80014f0 <HAL_DMA_IRQHandler+0x2cc>
 800150a:	e000      	b.n	800150e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800150c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2201      	movs	r2, #1
 8001512:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001522:	2b00      	cmp	r3, #0
 8001524:	d005      	beq.n	8001532 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	4798      	blx	r3
 800152e:	e000      	b.n	8001532 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001530:	bf00      	nop
    }
  }
}
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
 8001544:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001554:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	2b40      	cmp	r3, #64	@ 0x40
 8001564:	d108      	bne.n	8001578 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001576:	e007      	b.n	8001588 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	68ba      	ldr	r2, [r7, #8]
 800157e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	60da      	str	r2, [r3, #12]
}
 8001588:	bf00      	nop
 800158a:	3714      	adds	r7, #20
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	3b10      	subs	r3, #16
 80015a4:	4a14      	ldr	r2, [pc, #80]	@ (80015f8 <DMA_CalcBaseAndBitshift+0x64>)
 80015a6:	fba2 2303 	umull	r2, r3, r2, r3
 80015aa:	091b      	lsrs	r3, r3, #4
 80015ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80015ae:	4a13      	ldr	r2, [pc, #76]	@ (80015fc <DMA_CalcBaseAndBitshift+0x68>)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4413      	add	r3, r2
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	461a      	mov	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2b03      	cmp	r3, #3
 80015c0:	d909      	bls.n	80015d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80015ca:	f023 0303 	bic.w	r3, r3, #3
 80015ce:	1d1a      	adds	r2, r3, #4
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	659a      	str	r2, [r3, #88]	@ 0x58
 80015d4:	e007      	b.n	80015e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80015de:	f023 0303 	bic.w	r3, r3, #3
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	aaaaaaab 	.word	0xaaaaaaab
 80015fc:	08003a38 	.word	0x08003a38

08001600 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001608:	2300      	movs	r3, #0
 800160a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001610:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d11f      	bne.n	800165a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	2b03      	cmp	r3, #3
 800161e:	d856      	bhi.n	80016ce <DMA_CheckFifoParam+0xce>
 8001620:	a201      	add	r2, pc, #4	@ (adr r2, 8001628 <DMA_CheckFifoParam+0x28>)
 8001622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001626:	bf00      	nop
 8001628:	08001639 	.word	0x08001639
 800162c:	0800164b 	.word	0x0800164b
 8001630:	08001639 	.word	0x08001639
 8001634:	080016cf 	.word	0x080016cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800163c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d046      	beq.n	80016d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001648:	e043      	b.n	80016d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800164e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001652:	d140      	bne.n	80016d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001658:	e03d      	b.n	80016d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001662:	d121      	bne.n	80016a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	2b03      	cmp	r3, #3
 8001668:	d837      	bhi.n	80016da <DMA_CheckFifoParam+0xda>
 800166a:	a201      	add	r2, pc, #4	@ (adr r2, 8001670 <DMA_CheckFifoParam+0x70>)
 800166c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001670:	08001681 	.word	0x08001681
 8001674:	08001687 	.word	0x08001687
 8001678:	08001681 	.word	0x08001681
 800167c:	08001699 	.word	0x08001699
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	73fb      	strb	r3, [r7, #15]
      break;
 8001684:	e030      	b.n	80016e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800168a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d025      	beq.n	80016de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001696:	e022      	b.n	80016de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800169c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80016a0:	d11f      	bne.n	80016e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80016a6:	e01c      	b.n	80016e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d903      	bls.n	80016b6 <DMA_CheckFifoParam+0xb6>
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	2b03      	cmp	r3, #3
 80016b2:	d003      	beq.n	80016bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80016b4:	e018      	b.n	80016e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	73fb      	strb	r3, [r7, #15]
      break;
 80016ba:	e015      	b.n	80016e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d00e      	beq.n	80016e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	73fb      	strb	r3, [r7, #15]
      break;
 80016cc:	e00b      	b.n	80016e6 <DMA_CheckFifoParam+0xe6>
      break;
 80016ce:	bf00      	nop
 80016d0:	e00a      	b.n	80016e8 <DMA_CheckFifoParam+0xe8>
      break;
 80016d2:	bf00      	nop
 80016d4:	e008      	b.n	80016e8 <DMA_CheckFifoParam+0xe8>
      break;
 80016d6:	bf00      	nop
 80016d8:	e006      	b.n	80016e8 <DMA_CheckFifoParam+0xe8>
      break;
 80016da:	bf00      	nop
 80016dc:	e004      	b.n	80016e8 <DMA_CheckFifoParam+0xe8>
      break;
 80016de:	bf00      	nop
 80016e0:	e002      	b.n	80016e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80016e2:	bf00      	nop
 80016e4:	e000      	b.n	80016e8 <DMA_CheckFifoParam+0xe8>
      break;
 80016e6:	bf00      	nop
    }
  } 
  
  return status; 
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop

080016f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b089      	sub	sp, #36	@ 0x24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800170a:	2300      	movs	r3, #0
 800170c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
 8001712:	e159      	b.n	80019c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001714:	2201      	movs	r2, #1
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	4013      	ands	r3, r2
 8001726:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	429a      	cmp	r2, r3
 800172e:	f040 8148 	bne.w	80019c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f003 0303 	and.w	r3, r3, #3
 800173a:	2b01      	cmp	r3, #1
 800173c:	d005      	beq.n	800174a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001746:	2b02      	cmp	r3, #2
 8001748:	d130      	bne.n	80017ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	2203      	movs	r2, #3
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43db      	mvns	r3, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4013      	ands	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	68da      	ldr	r2, [r3, #12]
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4313      	orrs	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001780:	2201      	movs	r2, #1
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4013      	ands	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	091b      	lsrs	r3, r3, #4
 8001796:	f003 0201 	and.w	r2, r3, #1
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f003 0303 	and.w	r3, r3, #3
 80017b4:	2b03      	cmp	r3, #3
 80017b6:	d017      	beq.n	80017e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	2203      	movs	r2, #3
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	43db      	mvns	r3, r3
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4013      	ands	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	689a      	ldr	r2, [r3, #8]
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4313      	orrs	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f003 0303 	and.w	r3, r3, #3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d123      	bne.n	800183c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	08da      	lsrs	r2, r3, #3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3208      	adds	r2, #8
 80017fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001800:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	f003 0307 	and.w	r3, r3, #7
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	220f      	movs	r2, #15
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	43db      	mvns	r3, r3
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	4013      	ands	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	691a      	ldr	r2, [r3, #16]
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4313      	orrs	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	08da      	lsrs	r2, r3, #3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	3208      	adds	r2, #8
 8001836:	69b9      	ldr	r1, [r7, #24]
 8001838:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	2203      	movs	r2, #3
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4013      	ands	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 0203 	and.w	r2, r3, #3
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4313      	orrs	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001878:	2b00      	cmp	r3, #0
 800187a:	f000 80a2 	beq.w	80019c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	4b57      	ldr	r3, [pc, #348]	@ (80019e0 <HAL_GPIO_Init+0x2e8>)
 8001884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001886:	4a56      	ldr	r2, [pc, #344]	@ (80019e0 <HAL_GPIO_Init+0x2e8>)
 8001888:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800188c:	6453      	str	r3, [r2, #68]	@ 0x44
 800188e:	4b54      	ldr	r3, [pc, #336]	@ (80019e0 <HAL_GPIO_Init+0x2e8>)
 8001890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001892:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800189a:	4a52      	ldr	r2, [pc, #328]	@ (80019e4 <HAL_GPIO_Init+0x2ec>)
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	089b      	lsrs	r3, r3, #2
 80018a0:	3302      	adds	r3, #2
 80018a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f003 0303 	and.w	r3, r3, #3
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	220f      	movs	r2, #15
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43db      	mvns	r3, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4013      	ands	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a49      	ldr	r2, [pc, #292]	@ (80019e8 <HAL_GPIO_Init+0x2f0>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d019      	beq.n	80018fa <HAL_GPIO_Init+0x202>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a48      	ldr	r2, [pc, #288]	@ (80019ec <HAL_GPIO_Init+0x2f4>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d013      	beq.n	80018f6 <HAL_GPIO_Init+0x1fe>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a47      	ldr	r2, [pc, #284]	@ (80019f0 <HAL_GPIO_Init+0x2f8>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d00d      	beq.n	80018f2 <HAL_GPIO_Init+0x1fa>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a46      	ldr	r2, [pc, #280]	@ (80019f4 <HAL_GPIO_Init+0x2fc>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d007      	beq.n	80018ee <HAL_GPIO_Init+0x1f6>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a45      	ldr	r2, [pc, #276]	@ (80019f8 <HAL_GPIO_Init+0x300>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d101      	bne.n	80018ea <HAL_GPIO_Init+0x1f2>
 80018e6:	2304      	movs	r3, #4
 80018e8:	e008      	b.n	80018fc <HAL_GPIO_Init+0x204>
 80018ea:	2307      	movs	r3, #7
 80018ec:	e006      	b.n	80018fc <HAL_GPIO_Init+0x204>
 80018ee:	2303      	movs	r3, #3
 80018f0:	e004      	b.n	80018fc <HAL_GPIO_Init+0x204>
 80018f2:	2302      	movs	r3, #2
 80018f4:	e002      	b.n	80018fc <HAL_GPIO_Init+0x204>
 80018f6:	2301      	movs	r3, #1
 80018f8:	e000      	b.n	80018fc <HAL_GPIO_Init+0x204>
 80018fa:	2300      	movs	r3, #0
 80018fc:	69fa      	ldr	r2, [r7, #28]
 80018fe:	f002 0203 	and.w	r2, r2, #3
 8001902:	0092      	lsls	r2, r2, #2
 8001904:	4093      	lsls	r3, r2
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4313      	orrs	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800190c:	4935      	ldr	r1, [pc, #212]	@ (80019e4 <HAL_GPIO_Init+0x2ec>)
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	089b      	lsrs	r3, r3, #2
 8001912:	3302      	adds	r3, #2
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800191a:	4b38      	ldr	r3, [pc, #224]	@ (80019fc <HAL_GPIO_Init+0x304>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	43db      	mvns	r3, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4013      	ands	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	4313      	orrs	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800193e:	4a2f      	ldr	r2, [pc, #188]	@ (80019fc <HAL_GPIO_Init+0x304>)
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001944:	4b2d      	ldr	r3, [pc, #180]	@ (80019fc <HAL_GPIO_Init+0x304>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	43db      	mvns	r3, r3
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4013      	ands	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d003      	beq.n	8001968 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	4313      	orrs	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001968:	4a24      	ldr	r2, [pc, #144]	@ (80019fc <HAL_GPIO_Init+0x304>)
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800196e:	4b23      	ldr	r3, [pc, #140]	@ (80019fc <HAL_GPIO_Init+0x304>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	43db      	mvns	r3, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4013      	ands	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	4313      	orrs	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001992:	4a1a      	ldr	r2, [pc, #104]	@ (80019fc <HAL_GPIO_Init+0x304>)
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001998:	4b18      	ldr	r3, [pc, #96]	@ (80019fc <HAL_GPIO_Init+0x304>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	43db      	mvns	r3, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d003      	beq.n	80019bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019bc:	4a0f      	ldr	r2, [pc, #60]	@ (80019fc <HAL_GPIO_Init+0x304>)
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	3301      	adds	r3, #1
 80019c6:	61fb      	str	r3, [r7, #28]
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	2b0f      	cmp	r3, #15
 80019cc:	f67f aea2 	bls.w	8001714 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019d0:	bf00      	nop
 80019d2:	bf00      	nop
 80019d4:	3724      	adds	r7, #36	@ 0x24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40013800 	.word	0x40013800
 80019e8:	40020000 	.word	0x40020000
 80019ec:	40020400 	.word	0x40020400
 80019f0:	40020800 	.word	0x40020800
 80019f4:	40020c00 	.word	0x40020c00
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40013c00 	.word	0x40013c00

08001a00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	807b      	strh	r3, [r7, #2]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a10:	787b      	ldrb	r3, [r7, #1]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a16:	887a      	ldrh	r2, [r7, #2]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a1c:	e003      	b.n	8001a26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a1e:	887b      	ldrh	r3, [r7, #2]
 8001a20:	041a      	lsls	r2, r3, #16
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	619a      	str	r2, [r3, #24]
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b085      	sub	sp, #20
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a44:	887a      	ldrh	r2, [r7, #2]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	041a      	lsls	r2, r3, #16
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	43d9      	mvns	r1, r3
 8001a50:	887b      	ldrh	r3, [r7, #2]
 8001a52:	400b      	ands	r3, r1
 8001a54:	431a      	orrs	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	619a      	str	r2, [r3, #24]
}
 8001a5a:	bf00      	nop
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
	...

08001a68 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e128      	b.n	8001ccc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d109      	bne.n	8001a9a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a90      	ldr	r2, [pc, #576]	@ (8001cd4 <HAL_I2S_Init+0x26c>)
 8001a92:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7fe ffa3 	bl	80009e0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	69db      	ldr	r3, [r3, #28]
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	6812      	ldr	r2, [r2, #0]
 8001aac:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001ab0:	f023 030f 	bic.w	r3, r3, #15
 8001ab4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2202      	movs	r2, #2
 8001abc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d060      	beq.n	8001b88 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d102      	bne.n	8001ad4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001ace:	2310      	movs	r3, #16
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	e001      	b.n	8001ad8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001ad4:	2320      	movs	r3, #32
 8001ad6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	2b20      	cmp	r3, #32
 8001ade:	d802      	bhi.n	8001ae6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001ae6:	2001      	movs	r0, #1
 8001ae8:	f001 faf0 	bl	80030cc <HAL_RCCEx_GetPeriphCLKFreq>
 8001aec:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001af6:	d125      	bne.n	8001b44 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d010      	beq.n	8001b22 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	461a      	mov	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1c:	3305      	adds	r3, #5
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	e01f      	b.n	8001b62 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	461a      	mov	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3e:	3305      	adds	r3, #5
 8001b40:	613b      	str	r3, [r7, #16]
 8001b42:	e00e      	b.n	8001b62 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	461a      	mov	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5e:	3305      	adds	r3, #5
 8001b60:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	4a5c      	ldr	r2, [pc, #368]	@ (8001cd8 <HAL_I2S_Init+0x270>)
 8001b66:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6a:	08db      	lsrs	r3, r3, #3
 8001b6c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	085b      	lsrs	r3, r3, #1
 8001b7e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	021b      	lsls	r3, r3, #8
 8001b84:	61bb      	str	r3, [r7, #24]
 8001b86:	e003      	b.n	8001b90 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d902      	bls.n	8001b9c <HAL_I2S_Init+0x134>
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	2bff      	cmp	r3, #255	@ 0xff
 8001b9a:	d907      	bls.n	8001bac <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba0:	f043 0210 	orr.w	r2, r3, #16
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e08f      	b.n	8001ccc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691a      	ldr	r2, [r3, #16]
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	ea42 0103 	orr.w	r1, r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	69fa      	ldr	r2, [r7, #28]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001bca:	f023 030f 	bic.w	r3, r3, #15
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6851      	ldr	r1, [r2, #4]
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6892      	ldr	r2, [r2, #8]
 8001bd6:	4311      	orrs	r1, r2
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	68d2      	ldr	r2, [r2, #12]
 8001bdc:	4311      	orrs	r1, r2
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	6992      	ldr	r2, [r2, #24]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	431a      	orrs	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001bee:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d161      	bne.n	8001cbc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a38      	ldr	r2, [pc, #224]	@ (8001cdc <HAL_I2S_Init+0x274>)
 8001bfc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a37      	ldr	r2, [pc, #220]	@ (8001ce0 <HAL_I2S_Init+0x278>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d101      	bne.n	8001c0c <HAL_I2S_Init+0x1a4>
 8001c08:	4b36      	ldr	r3, [pc, #216]	@ (8001ce4 <HAL_I2S_Init+0x27c>)
 8001c0a:	e001      	b.n	8001c10 <HAL_I2S_Init+0x1a8>
 8001c0c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	6812      	ldr	r2, [r2, #0]
 8001c16:	4932      	ldr	r1, [pc, #200]	@ (8001ce0 <HAL_I2S_Init+0x278>)
 8001c18:	428a      	cmp	r2, r1
 8001c1a:	d101      	bne.n	8001c20 <HAL_I2S_Init+0x1b8>
 8001c1c:	4a31      	ldr	r2, [pc, #196]	@ (8001ce4 <HAL_I2S_Init+0x27c>)
 8001c1e:	e001      	b.n	8001c24 <HAL_I2S_Init+0x1bc>
 8001c20:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001c24:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001c28:	f023 030f 	bic.w	r3, r3, #15
 8001c2c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a2b      	ldr	r2, [pc, #172]	@ (8001ce0 <HAL_I2S_Init+0x278>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d101      	bne.n	8001c3c <HAL_I2S_Init+0x1d4>
 8001c38:	4b2a      	ldr	r3, [pc, #168]	@ (8001ce4 <HAL_I2S_Init+0x27c>)
 8001c3a:	e001      	b.n	8001c40 <HAL_I2S_Init+0x1d8>
 8001c3c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001c40:	2202      	movs	r2, #2
 8001c42:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a25      	ldr	r2, [pc, #148]	@ (8001ce0 <HAL_I2S_Init+0x278>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d101      	bne.n	8001c52 <HAL_I2S_Init+0x1ea>
 8001c4e:	4b25      	ldr	r3, [pc, #148]	@ (8001ce4 <HAL_I2S_Init+0x27c>)
 8001c50:	e001      	b.n	8001c56 <HAL_I2S_Init+0x1ee>
 8001c52:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001c56:	69db      	ldr	r3, [r3, #28]
 8001c58:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c62:	d003      	beq.n	8001c6c <HAL_I2S_Init+0x204>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d103      	bne.n	8001c74 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001c6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	e001      	b.n	8001c78 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001c74:	2300      	movs	r3, #0
 8001c76:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001c82:	4313      	orrs	r3, r2
 8001c84:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001c96:	4313      	orrs	r3, r2
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	897b      	ldrh	r3, [r7, #10]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ca4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a0d      	ldr	r2, [pc, #52]	@ (8001ce0 <HAL_I2S_Init+0x278>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d101      	bne.n	8001cb4 <HAL_I2S_Init+0x24c>
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce4 <HAL_I2S_Init+0x27c>)
 8001cb2:	e001      	b.n	8001cb8 <HAL_I2S_Init+0x250>
 8001cb4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001cb8:	897a      	ldrh	r2, [r7, #10]
 8001cba:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3720      	adds	r7, #32
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	08001ff9 	.word	0x08001ff9
 8001cd8:	cccccccd 	.word	0xcccccccd
 8001cdc:	0800210d 	.word	0x0800210d
 8001ce0:	40003800 	.word	0x40003800
 8001ce4:	40003400 	.word	0x40003400

08001ce8 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d002      	beq.n	8001d02 <HAL_I2S_Receive_DMA+0x1a>
 8001cfc:	88fb      	ldrh	r3, [r7, #6]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e09d      	b.n	8001e42 <HAL_I2S_Receive_DMA+0x15a>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d001      	beq.n	8001d16 <HAL_I2S_Receive_DMA+0x2e>
  {
    return HAL_BUSY;
 8001d12:	2302      	movs	r3, #2
 8001d14:	e095      	b.n	8001e42 <HAL_I2S_Receive_DMA+0x15a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d101      	bne.n	8001d26 <HAL_I2S_Receive_DMA+0x3e>
 8001d22:	2302      	movs	r3, #2
 8001d24:	e08d      	b.n	8001e42 <HAL_I2S_Receive_DMA+0x15a>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2204      	movs	r2, #4
 8001d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pRxBuffPtr = pData;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	69db      	ldr	r3, [r3, #28]
 8001d48:	f003 0307 	and.w	r3, r3, #7
 8001d4c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	2b03      	cmp	r3, #3
 8001d52:	d002      	beq.n	8001d5a <HAL_I2S_Receive_DMA+0x72>
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	2b05      	cmp	r3, #5
 8001d58:	d10a      	bne.n	8001d70 <HAL_I2S_Receive_DMA+0x88>
  {
    hi2s->RxXferSize = (Size << 1U);
 8001d5a:	88fb      	ldrh	r3, [r7, #6]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 8001d64:	88fb      	ldrh	r3, [r7, #6]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	865a      	strh	r2, [r3, #50]	@ 0x32
 8001d6e:	e005      	b.n	8001d7c <HAL_I2S_Receive_DMA+0x94>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	88fa      	ldrh	r2, [r7, #6]
 8001d74:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	88fa      	ldrh	r2, [r7, #6]
 8001d7a:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d80:	4a32      	ldr	r2, [pc, #200]	@ (8001e4c <HAL_I2S_Receive_DMA+0x164>)
 8001d82:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d88:	4a31      	ldr	r2, [pc, #196]	@ (8001e50 <HAL_I2S_Receive_DMA+0x168>)
 8001d8a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d90:	4a30      	ldr	r2, [pc, #192]	@ (8001e54 <HAL_I2S_Receive_DMA+0x16c>)
 8001d92:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001da2:	d10a      	bne.n	8001dba <HAL_I2S_Receive_DMA+0xd2>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001da4:	2300      	movs	r3, #0
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	330c      	adds	r3, #12
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dca:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8001dd0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8001dd2:	f7ff f9cf 	bl	8001174 <HAL_DMA_Start_IT>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d00f      	beq.n	8001dfc <HAL_I2S_Receive_DMA+0x114>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de0:	f043 0208 	orr.w	r2, r3, #8
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e022      	b.n	8001e42 <HAL_I2S_Receive_DMA+0x15a>
  }

  __HAL_UNLOCK(hi2s);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d107      	bne.n	8001e22 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f042 0201 	orr.w	r2, r2, #1
 8001e20:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	69db      	ldr	r3, [r3, #28]
 8001e28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d107      	bne.n	8001e40 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	69da      	ldr	r2, [r3, #28]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001e3e:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	08001ed7 	.word	0x08001ed7
 8001e50:	08001e95 	.word	0x08001e95
 8001e54:	08001ef3 	.word	0x08001ef3

08001e58 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ea0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10e      	bne.n	8001ec8 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0201 	bic.w	r2, r2, #1
 8001eb8:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	f7fe fd15 	bl	80008f8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001ece:	bf00      	nop
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b084      	sub	sp, #16
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ee2:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8001ee4:	68f8      	ldr	r0, [r7, #12]
 8001ee6:	f7ff ffc1 	bl	8001e6c <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001eea:	bf00      	nop
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b084      	sub	sp, #16
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001efe:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 0203 	bic.w	r2, r2, #3
 8001f0e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2200      	movs	r2, #0
 8001f14:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f28:	f043 0208 	orr.w	r2, r3, #8
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f7ff ffa5 	bl	8001e80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001f36:	bf00      	nop
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f4a:	881a      	ldrh	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f56:	1c9a      	adds	r2, r3, #2
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	3b01      	subs	r3, #1
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d10e      	bne.n	8001f92 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001f82:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f7ff ff63 	bl	8001e58 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b082      	sub	sp, #8
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68da      	ldr	r2, [r3, #12]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fac:	b292      	uxth	r2, r2
 8001fae:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb4:	1c9a      	adds	r2, r3, #2
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10e      	bne.n	8001ff0 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001fe0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7fe fc84 	bl	80008f8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001ff0:	bf00      	nop
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b04      	cmp	r3, #4
 8002012:	d13a      	bne.n	800208a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b01      	cmp	r3, #1
 800201c:	d109      	bne.n	8002032 <I2S_IRQHandler+0x3a>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002028:	2b40      	cmp	r3, #64	@ 0x40
 800202a:	d102      	bne.n	8002032 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff ffb4 	bl	8001f9a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002038:	2b40      	cmp	r3, #64	@ 0x40
 800203a:	d126      	bne.n	800208a <I2S_IRQHandler+0x92>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f003 0320 	and.w	r3, r3, #32
 8002046:	2b20      	cmp	r3, #32
 8002048:	d11f      	bne.n	800208a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002058:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800205a:	2300      	movs	r3, #0
 800205c:	613b      	str	r3, [r7, #16]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207c:	f043 0202 	orr.w	r2, r3, #2
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f7ff fefb 	bl	8001e80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b03      	cmp	r3, #3
 8002094:	d136      	bne.n	8002104 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b02      	cmp	r3, #2
 800209e:	d109      	bne.n	80020b4 <I2S_IRQHandler+0xbc>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020aa:	2b80      	cmp	r3, #128	@ 0x80
 80020ac:	d102      	bne.n	80020b4 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff ff45 	bl	8001f3e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b08      	cmp	r3, #8
 80020bc:	d122      	bne.n	8002104 <I2S_IRQHandler+0x10c>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 0320 	and.w	r3, r3, #32
 80020c8:	2b20      	cmp	r3, #32
 80020ca:	d11b      	bne.n	8002104 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80020da:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80020dc:	2300      	movs	r3, #0
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f6:	f043 0204 	orr.w	r2, r3, #4
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7ff febe 	bl	8001e80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002104:	bf00      	nop
 8002106:	3718      	adds	r7, #24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b088      	sub	sp, #32
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a92      	ldr	r2, [pc, #584]	@ (800236c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d101      	bne.n	800212a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002126:	4b92      	ldr	r3, [pc, #584]	@ (8002370 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002128:	e001      	b.n	800212e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800212a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a8b      	ldr	r2, [pc, #556]	@ (800236c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d101      	bne.n	8002148 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002144:	4b8a      	ldr	r3, [pc, #552]	@ (8002370 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002146:	e001      	b.n	800214c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002148:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002158:	d004      	beq.n	8002164 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	f040 8099 	bne.w	8002296 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b02      	cmp	r3, #2
 800216c:	d107      	bne.n	800217e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002174:	2b00      	cmp	r3, #0
 8002176:	d002      	beq.n	800217e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 f925 	bl	80023c8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	2b01      	cmp	r3, #1
 8002186:	d107      	bne.n	8002198 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800218e:	2b00      	cmp	r3, #0
 8002190:	d002      	beq.n	8002198 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f9c8 	bl	8002528 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800219e:	2b40      	cmp	r3, #64	@ 0x40
 80021a0:	d13a      	bne.n	8002218 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	f003 0320 	and.w	r3, r3, #32
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d035      	beq.n	8002218 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a6e      	ldr	r2, [pc, #440]	@ (800236c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d101      	bne.n	80021ba <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80021b6:	4b6e      	ldr	r3, [pc, #440]	@ (8002370 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80021b8:	e001      	b.n	80021be <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80021ba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4969      	ldr	r1, [pc, #420]	@ (800236c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80021c6:	428b      	cmp	r3, r1
 80021c8:	d101      	bne.n	80021ce <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80021ca:	4b69      	ldr	r3, [pc, #420]	@ (8002370 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80021cc:	e001      	b.n	80021d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80021ce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80021d2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80021d6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80021e6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80021e8:	2300      	movs	r3, #0
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220a:	f043 0202 	orr.w	r2, r3, #2
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7ff fe34 	bl	8001e80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b08      	cmp	r3, #8
 8002220:	f040 80c3 	bne.w	80023aa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	f003 0320 	and.w	r3, r3, #32
 800222a:	2b00      	cmp	r3, #0
 800222c:	f000 80bd 	beq.w	80023aa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800223e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a49      	ldr	r2, [pc, #292]	@ (800236c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d101      	bne.n	800224e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800224a:	4b49      	ldr	r3, [pc, #292]	@ (8002370 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800224c:	e001      	b.n	8002252 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800224e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4944      	ldr	r1, [pc, #272]	@ (800236c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800225a:	428b      	cmp	r3, r1
 800225c:	d101      	bne.n	8002262 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800225e:	4b44      	ldr	r3, [pc, #272]	@ (8002370 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002260:	e001      	b.n	8002266 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002262:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002266:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800226a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800226c:	2300      	movs	r3, #0
 800226e:	60bb      	str	r3, [r7, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	60bb      	str	r3, [r7, #8]
 8002278:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002286:	f043 0204 	orr.w	r2, r3, #4
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff fdf6 	bl	8001e80 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002294:	e089      	b.n	80023aa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b02      	cmp	r3, #2
 800229e:	d107      	bne.n	80022b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d002      	beq.n	80022b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f8be 	bl	800242c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d107      	bne.n	80022ca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d002      	beq.n	80022ca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f8fd 	bl	80024c4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022d0:	2b40      	cmp	r3, #64	@ 0x40
 80022d2:	d12f      	bne.n	8002334 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	f003 0320 	and.w	r3, r3, #32
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d02a      	beq.n	8002334 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80022ec:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a1e      	ldr	r2, [pc, #120]	@ (800236c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d101      	bne.n	80022fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80022f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002370 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80022fa:	e001      	b.n	8002300 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80022fc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4919      	ldr	r1, [pc, #100]	@ (800236c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002308:	428b      	cmp	r3, r1
 800230a:	d101      	bne.n	8002310 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800230c:	4b18      	ldr	r3, [pc, #96]	@ (8002370 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800230e:	e001      	b.n	8002314 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002310:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002314:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002318:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002326:	f043 0202 	orr.w	r2, r3, #2
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7ff fda6 	bl	8001e80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	f003 0308 	and.w	r3, r3, #8
 800233a:	2b08      	cmp	r3, #8
 800233c:	d136      	bne.n	80023ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	f003 0320 	and.w	r3, r3, #32
 8002344:	2b00      	cmp	r3, #0
 8002346:	d031      	beq.n	80023ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a07      	ldr	r2, [pc, #28]	@ (800236c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d101      	bne.n	8002356 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002352:	4b07      	ldr	r3, [pc, #28]	@ (8002370 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002354:	e001      	b.n	800235a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002356:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4902      	ldr	r1, [pc, #8]	@ (800236c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002362:	428b      	cmp	r3, r1
 8002364:	d106      	bne.n	8002374 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002366:	4b02      	ldr	r3, [pc, #8]	@ (8002370 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002368:	e006      	b.n	8002378 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800236a:	bf00      	nop
 800236c:	40003800 	.word	0x40003800
 8002370:	40003400 	.word	0x40003400
 8002374:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002378:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800237c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800238c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800239a:	f043 0204 	orr.w	r2, r3, #4
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7ff fd6c 	bl	8001e80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80023a8:	e000      	b.n	80023ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80023aa:	bf00      	nop
}
 80023ac:	bf00      	nop
 80023ae:	3720      	adds	r7, #32
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d4:	1c99      	adds	r1, r3, #2
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6251      	str	r1, [r2, #36]	@ 0x24
 80023da:	881a      	ldrh	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	3b01      	subs	r3, #1
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d113      	bne.n	8002422 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002408:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800240e:	b29b      	uxth	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d106      	bne.n	8002422 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff ffc9 	bl	80023b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002438:	1c99      	adds	r1, r3, #2
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6251      	str	r1, [r2, #36]	@ 0x24
 800243e:	8819      	ldrh	r1, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a1d      	ldr	r2, [pc, #116]	@ (80024bc <I2SEx_TxISR_I2SExt+0x90>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d101      	bne.n	800244e <I2SEx_TxISR_I2SExt+0x22>
 800244a:	4b1d      	ldr	r3, [pc, #116]	@ (80024c0 <I2SEx_TxISR_I2SExt+0x94>)
 800244c:	e001      	b.n	8002452 <I2SEx_TxISR_I2SExt+0x26>
 800244e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002452:	460a      	mov	r2, r1
 8002454:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800245a:	b29b      	uxth	r3, r3
 800245c:	3b01      	subs	r3, #1
 800245e:	b29a      	uxth	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002468:	b29b      	uxth	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d121      	bne.n	80024b2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a12      	ldr	r2, [pc, #72]	@ (80024bc <I2SEx_TxISR_I2SExt+0x90>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d101      	bne.n	800247c <I2SEx_TxISR_I2SExt+0x50>
 8002478:	4b11      	ldr	r3, [pc, #68]	@ (80024c0 <I2SEx_TxISR_I2SExt+0x94>)
 800247a:	e001      	b.n	8002480 <I2SEx_TxISR_I2SExt+0x54>
 800247c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	490d      	ldr	r1, [pc, #52]	@ (80024bc <I2SEx_TxISR_I2SExt+0x90>)
 8002488:	428b      	cmp	r3, r1
 800248a:	d101      	bne.n	8002490 <I2SEx_TxISR_I2SExt+0x64>
 800248c:	4b0c      	ldr	r3, [pc, #48]	@ (80024c0 <I2SEx_TxISR_I2SExt+0x94>)
 800248e:	e001      	b.n	8002494 <I2SEx_TxISR_I2SExt+0x68>
 8002490:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002494:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002498:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800249e:	b29b      	uxth	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d106      	bne.n	80024b2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f7ff ff81 	bl	80023b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40003800 	.word	0x40003800
 80024c0:	40003400 	.word	0x40003400

080024c4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68d8      	ldr	r0, [r3, #12]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d6:	1c99      	adds	r1, r3, #2
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80024dc:	b282      	uxth	r2, r0
 80024de:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	3b01      	subs	r3, #1
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d113      	bne.n	8002520 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002506:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800250c:	b29b      	uxth	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d106      	bne.n	8002520 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7ff ff4a 	bl	80023b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002520:	bf00      	nop
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a20      	ldr	r2, [pc, #128]	@ (80025b8 <I2SEx_RxISR_I2SExt+0x90>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d101      	bne.n	800253e <I2SEx_RxISR_I2SExt+0x16>
 800253a:	4b20      	ldr	r3, [pc, #128]	@ (80025bc <I2SEx_RxISR_I2SExt+0x94>)
 800253c:	e001      	b.n	8002542 <I2SEx_RxISR_I2SExt+0x1a>
 800253e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002542:	68d8      	ldr	r0, [r3, #12]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002548:	1c99      	adds	r1, r3, #2
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800254e:	b282      	uxth	r2, r0
 8002550:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002556:	b29b      	uxth	r3, r3
 8002558:	3b01      	subs	r3, #1
 800255a:	b29a      	uxth	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002564:	b29b      	uxth	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d121      	bne.n	80025ae <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a12      	ldr	r2, [pc, #72]	@ (80025b8 <I2SEx_RxISR_I2SExt+0x90>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d101      	bne.n	8002578 <I2SEx_RxISR_I2SExt+0x50>
 8002574:	4b11      	ldr	r3, [pc, #68]	@ (80025bc <I2SEx_RxISR_I2SExt+0x94>)
 8002576:	e001      	b.n	800257c <I2SEx_RxISR_I2SExt+0x54>
 8002578:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	490d      	ldr	r1, [pc, #52]	@ (80025b8 <I2SEx_RxISR_I2SExt+0x90>)
 8002584:	428b      	cmp	r3, r1
 8002586:	d101      	bne.n	800258c <I2SEx_RxISR_I2SExt+0x64>
 8002588:	4b0c      	ldr	r3, [pc, #48]	@ (80025bc <I2SEx_RxISR_I2SExt+0x94>)
 800258a:	e001      	b.n	8002590 <I2SEx_RxISR_I2SExt+0x68>
 800258c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002590:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002594:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800259a:	b29b      	uxth	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	d106      	bne.n	80025ae <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f7ff ff03 	bl	80023b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40003800 	.word	0x40003800
 80025bc:	40003400 	.word	0x40003400

080025c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e267      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d075      	beq.n	80026ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80025de:	4b88      	ldr	r3, [pc, #544]	@ (8002800 <HAL_RCC_OscConfig+0x240>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 030c 	and.w	r3, r3, #12
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d00c      	beq.n	8002604 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ea:	4b85      	ldr	r3, [pc, #532]	@ (8002800 <HAL_RCC_OscConfig+0x240>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80025f2:	2b08      	cmp	r3, #8
 80025f4:	d112      	bne.n	800261c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025f6:	4b82      	ldr	r3, [pc, #520]	@ (8002800 <HAL_RCC_OscConfig+0x240>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002602:	d10b      	bne.n	800261c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002604:	4b7e      	ldr	r3, [pc, #504]	@ (8002800 <HAL_RCC_OscConfig+0x240>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d05b      	beq.n	80026c8 <HAL_RCC_OscConfig+0x108>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d157      	bne.n	80026c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e242      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002624:	d106      	bne.n	8002634 <HAL_RCC_OscConfig+0x74>
 8002626:	4b76      	ldr	r3, [pc, #472]	@ (8002800 <HAL_RCC_OscConfig+0x240>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a75      	ldr	r2, [pc, #468]	@ (8002800 <HAL_RCC_OscConfig+0x240>)
 800262c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	e01d      	b.n	8002670 <HAL_RCC_OscConfig+0xb0>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800263c:	d10c      	bne.n	8002658 <HAL_RCC_OscConfig+0x98>
 800263e:	4b70      	ldr	r3, [pc, #448]	@ (8002800 <HAL_RCC_OscConfig+0x240>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a6f      	ldr	r2, [pc, #444]	@ (8002800 <HAL_RCC_OscConfig+0x240>)
 8002644:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	4b6d      	ldr	r3, [pc, #436]	@ (8002800 <HAL_RCC_OscConfig+0x240>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a6c      	ldr	r2, [pc, #432]	@ (8002800 <HAL_RCC_OscConfig+0x240>)
 8002650:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	e00b      	b.n	8002670 <HAL_RCC_OscConfig+0xb0>
 8002658:	4b69      	ldr	r3, [pc, #420]	@ (8002800 <HAL_RCC_OscConfig+0x240>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a68      	ldr	r2, [pc, #416]	@ (8002800 <HAL_RCC_OscConfig+0x240>)
 800265e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002662:	6013      	str	r3, [r2, #0]
 8002664:	4b66      	ldr	r3, [pc, #408]	@ (8002800 <HAL_RCC_OscConfig+0x240>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a65      	ldr	r2, [pc, #404]	@ (8002800 <HAL_RCC_OscConfig+0x240>)
 800266a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800266e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d013      	beq.n	80026a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002678:	f7fe fb8c 	bl	8000d94 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002680:	f7fe fb88 	bl	8000d94 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b64      	cmp	r3, #100	@ 0x64
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e207      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002692:	4b5b      	ldr	r3, [pc, #364]	@ (8002800 <HAL_RCC_OscConfig+0x240>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0f0      	beq.n	8002680 <HAL_RCC_OscConfig+0xc0>
 800269e:	e014      	b.n	80026ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a0:	f7fe fb78 	bl	8000d94 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026a8:	f7fe fb74 	bl	8000d94 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b64      	cmp	r3, #100	@ 0x64
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e1f3      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ba:	4b51      	ldr	r3, [pc, #324]	@ (8002800 <HAL_RCC_OscConfig+0x240>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1f0      	bne.n	80026a8 <HAL_RCC_OscConfig+0xe8>
 80026c6:	e000      	b.n	80026ca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d063      	beq.n	800279e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80026d6:	4b4a      	ldr	r3, [pc, #296]	@ (8002800 <HAL_RCC_OscConfig+0x240>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 030c 	and.w	r3, r3, #12
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00b      	beq.n	80026fa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026e2:	4b47      	ldr	r3, [pc, #284]	@ (8002800 <HAL_RCC_OscConfig+0x240>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80026ea:	2b08      	cmp	r3, #8
 80026ec:	d11c      	bne.n	8002728 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ee:	4b44      	ldr	r3, [pc, #272]	@ (8002800 <HAL_RCC_OscConfig+0x240>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d116      	bne.n	8002728 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026fa:	4b41      	ldr	r3, [pc, #260]	@ (8002800 <HAL_RCC_OscConfig+0x240>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d005      	beq.n	8002712 <HAL_RCC_OscConfig+0x152>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d001      	beq.n	8002712 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e1c7      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002712:	4b3b      	ldr	r3, [pc, #236]	@ (8002800 <HAL_RCC_OscConfig+0x240>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	4937      	ldr	r1, [pc, #220]	@ (8002800 <HAL_RCC_OscConfig+0x240>)
 8002722:	4313      	orrs	r3, r2
 8002724:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002726:	e03a      	b.n	800279e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d020      	beq.n	8002772 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002730:	4b34      	ldr	r3, [pc, #208]	@ (8002804 <HAL_RCC_OscConfig+0x244>)
 8002732:	2201      	movs	r2, #1
 8002734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002736:	f7fe fb2d 	bl	8000d94 <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800273c:	e008      	b.n	8002750 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800273e:	f7fe fb29 	bl	8000d94 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e1a8      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002750:	4b2b      	ldr	r3, [pc, #172]	@ (8002800 <HAL_RCC_OscConfig+0x240>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0f0      	beq.n	800273e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275c:	4b28      	ldr	r3, [pc, #160]	@ (8002800 <HAL_RCC_OscConfig+0x240>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	4925      	ldr	r1, [pc, #148]	@ (8002800 <HAL_RCC_OscConfig+0x240>)
 800276c:	4313      	orrs	r3, r2
 800276e:	600b      	str	r3, [r1, #0]
 8002770:	e015      	b.n	800279e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002772:	4b24      	ldr	r3, [pc, #144]	@ (8002804 <HAL_RCC_OscConfig+0x244>)
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002778:	f7fe fb0c 	bl	8000d94 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002780:	f7fe fb08 	bl	8000d94 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e187      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002792:	4b1b      	ldr	r3, [pc, #108]	@ (8002800 <HAL_RCC_OscConfig+0x240>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d036      	beq.n	8002818 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d016      	beq.n	80027e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027b2:	4b15      	ldr	r3, [pc, #84]	@ (8002808 <HAL_RCC_OscConfig+0x248>)
 80027b4:	2201      	movs	r2, #1
 80027b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b8:	f7fe faec 	bl	8000d94 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027c0:	f7fe fae8 	bl	8000d94 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e167      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002800 <HAL_RCC_OscConfig+0x240>)
 80027d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0f0      	beq.n	80027c0 <HAL_RCC_OscConfig+0x200>
 80027de:	e01b      	b.n	8002818 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027e0:	4b09      	ldr	r3, [pc, #36]	@ (8002808 <HAL_RCC_OscConfig+0x248>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e6:	f7fe fad5 	bl	8000d94 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027ec:	e00e      	b.n	800280c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027ee:	f7fe fad1 	bl	8000d94 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d907      	bls.n	800280c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e150      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4e2>
 8002800:	40023800 	.word	0x40023800
 8002804:	42470000 	.word	0x42470000
 8002808:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800280c:	4b88      	ldr	r3, [pc, #544]	@ (8002a30 <HAL_RCC_OscConfig+0x470>)
 800280e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1ea      	bne.n	80027ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 8097 	beq.w	8002954 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002826:	2300      	movs	r3, #0
 8002828:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800282a:	4b81      	ldr	r3, [pc, #516]	@ (8002a30 <HAL_RCC_OscConfig+0x470>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10f      	bne.n	8002856 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	60bb      	str	r3, [r7, #8]
 800283a:	4b7d      	ldr	r3, [pc, #500]	@ (8002a30 <HAL_RCC_OscConfig+0x470>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283e:	4a7c      	ldr	r2, [pc, #496]	@ (8002a30 <HAL_RCC_OscConfig+0x470>)
 8002840:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002844:	6413      	str	r3, [r2, #64]	@ 0x40
 8002846:	4b7a      	ldr	r3, [pc, #488]	@ (8002a30 <HAL_RCC_OscConfig+0x470>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800284e:	60bb      	str	r3, [r7, #8]
 8002850:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002852:	2301      	movs	r3, #1
 8002854:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002856:	4b77      	ldr	r3, [pc, #476]	@ (8002a34 <HAL_RCC_OscConfig+0x474>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800285e:	2b00      	cmp	r3, #0
 8002860:	d118      	bne.n	8002894 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002862:	4b74      	ldr	r3, [pc, #464]	@ (8002a34 <HAL_RCC_OscConfig+0x474>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a73      	ldr	r2, [pc, #460]	@ (8002a34 <HAL_RCC_OscConfig+0x474>)
 8002868:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800286c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800286e:	f7fe fa91 	bl	8000d94 <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002874:	e008      	b.n	8002888 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002876:	f7fe fa8d 	bl	8000d94 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e10c      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002888:	4b6a      	ldr	r3, [pc, #424]	@ (8002a34 <HAL_RCC_OscConfig+0x474>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0f0      	beq.n	8002876 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d106      	bne.n	80028aa <HAL_RCC_OscConfig+0x2ea>
 800289c:	4b64      	ldr	r3, [pc, #400]	@ (8002a30 <HAL_RCC_OscConfig+0x470>)
 800289e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a0:	4a63      	ldr	r2, [pc, #396]	@ (8002a30 <HAL_RCC_OscConfig+0x470>)
 80028a2:	f043 0301 	orr.w	r3, r3, #1
 80028a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80028a8:	e01c      	b.n	80028e4 <HAL_RCC_OscConfig+0x324>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	2b05      	cmp	r3, #5
 80028b0:	d10c      	bne.n	80028cc <HAL_RCC_OscConfig+0x30c>
 80028b2:	4b5f      	ldr	r3, [pc, #380]	@ (8002a30 <HAL_RCC_OscConfig+0x470>)
 80028b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b6:	4a5e      	ldr	r2, [pc, #376]	@ (8002a30 <HAL_RCC_OscConfig+0x470>)
 80028b8:	f043 0304 	orr.w	r3, r3, #4
 80028bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80028be:	4b5c      	ldr	r3, [pc, #368]	@ (8002a30 <HAL_RCC_OscConfig+0x470>)
 80028c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c2:	4a5b      	ldr	r2, [pc, #364]	@ (8002a30 <HAL_RCC_OscConfig+0x470>)
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80028ca:	e00b      	b.n	80028e4 <HAL_RCC_OscConfig+0x324>
 80028cc:	4b58      	ldr	r3, [pc, #352]	@ (8002a30 <HAL_RCC_OscConfig+0x470>)
 80028ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d0:	4a57      	ldr	r2, [pc, #348]	@ (8002a30 <HAL_RCC_OscConfig+0x470>)
 80028d2:	f023 0301 	bic.w	r3, r3, #1
 80028d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80028d8:	4b55      	ldr	r3, [pc, #340]	@ (8002a30 <HAL_RCC_OscConfig+0x470>)
 80028da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028dc:	4a54      	ldr	r2, [pc, #336]	@ (8002a30 <HAL_RCC_OscConfig+0x470>)
 80028de:	f023 0304 	bic.w	r3, r3, #4
 80028e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d015      	beq.n	8002918 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ec:	f7fe fa52 	bl	8000d94 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028f2:	e00a      	b.n	800290a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028f4:	f7fe fa4e 	bl	8000d94 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002902:	4293      	cmp	r3, r2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e0cb      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800290a:	4b49      	ldr	r3, [pc, #292]	@ (8002a30 <HAL_RCC_OscConfig+0x470>)
 800290c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0ee      	beq.n	80028f4 <HAL_RCC_OscConfig+0x334>
 8002916:	e014      	b.n	8002942 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002918:	f7fe fa3c 	bl	8000d94 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800291e:	e00a      	b.n	8002936 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002920:	f7fe fa38 	bl	8000d94 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800292e:	4293      	cmp	r3, r2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e0b5      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002936:	4b3e      	ldr	r3, [pc, #248]	@ (8002a30 <HAL_RCC_OscConfig+0x470>)
 8002938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1ee      	bne.n	8002920 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002942:	7dfb      	ldrb	r3, [r7, #23]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d105      	bne.n	8002954 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002948:	4b39      	ldr	r3, [pc, #228]	@ (8002a30 <HAL_RCC_OscConfig+0x470>)
 800294a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294c:	4a38      	ldr	r2, [pc, #224]	@ (8002a30 <HAL_RCC_OscConfig+0x470>)
 800294e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002952:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 80a1 	beq.w	8002aa0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800295e:	4b34      	ldr	r3, [pc, #208]	@ (8002a30 <HAL_RCC_OscConfig+0x470>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 030c 	and.w	r3, r3, #12
 8002966:	2b08      	cmp	r3, #8
 8002968:	d05c      	beq.n	8002a24 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	2b02      	cmp	r3, #2
 8002970:	d141      	bne.n	80029f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002972:	4b31      	ldr	r3, [pc, #196]	@ (8002a38 <HAL_RCC_OscConfig+0x478>)
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002978:	f7fe fa0c 	bl	8000d94 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002980:	f7fe fa08 	bl	8000d94 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e087      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002992:	4b27      	ldr	r3, [pc, #156]	@ (8002a30 <HAL_RCC_OscConfig+0x470>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f0      	bne.n	8002980 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69da      	ldr	r2, [r3, #28]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ac:	019b      	lsls	r3, r3, #6
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b4:	085b      	lsrs	r3, r3, #1
 80029b6:	3b01      	subs	r3, #1
 80029b8:	041b      	lsls	r3, r3, #16
 80029ba:	431a      	orrs	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c0:	061b      	lsls	r3, r3, #24
 80029c2:	491b      	ldr	r1, [pc, #108]	@ (8002a30 <HAL_RCC_OscConfig+0x470>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a38 <HAL_RCC_OscConfig+0x478>)
 80029ca:	2201      	movs	r2, #1
 80029cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ce:	f7fe f9e1 	bl	8000d94 <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d4:	e008      	b.n	80029e8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029d6:	f7fe f9dd 	bl	8000d94 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e05c      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e8:	4b11      	ldr	r3, [pc, #68]	@ (8002a30 <HAL_RCC_OscConfig+0x470>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0f0      	beq.n	80029d6 <HAL_RCC_OscConfig+0x416>
 80029f4:	e054      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029f6:	4b10      	ldr	r3, [pc, #64]	@ (8002a38 <HAL_RCC_OscConfig+0x478>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fc:	f7fe f9ca 	bl	8000d94 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a04:	f7fe f9c6 	bl	8000d94 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e045      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a16:	4b06      	ldr	r3, [pc, #24]	@ (8002a30 <HAL_RCC_OscConfig+0x470>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1f0      	bne.n	8002a04 <HAL_RCC_OscConfig+0x444>
 8002a22:	e03d      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d107      	bne.n	8002a3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e038      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4e2>
 8002a30:	40023800 	.word	0x40023800
 8002a34:	40007000 	.word	0x40007000
 8002a38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a3c:	4b1b      	ldr	r3, [pc, #108]	@ (8002aac <HAL_RCC_OscConfig+0x4ec>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d028      	beq.n	8002a9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d121      	bne.n	8002a9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d11a      	bne.n	8002a9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d111      	bne.n	8002a9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a82:	085b      	lsrs	r3, r3, #1
 8002a84:	3b01      	subs	r3, #1
 8002a86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d107      	bne.n	8002a9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d001      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e000      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3718      	adds	r7, #24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40023800 	.word	0x40023800

08002ab0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e0cc      	b.n	8002c5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ac4:	4b68      	ldr	r3, [pc, #416]	@ (8002c68 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d90c      	bls.n	8002aec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ad2:	4b65      	ldr	r3, [pc, #404]	@ (8002c68 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	b2d2      	uxtb	r2, r2
 8002ad8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ada:	4b63      	ldr	r3, [pc, #396]	@ (8002c68 <HAL_RCC_ClockConfig+0x1b8>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d001      	beq.n	8002aec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e0b8      	b.n	8002c5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d020      	beq.n	8002b3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d005      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b04:	4b59      	ldr	r3, [pc, #356]	@ (8002c6c <HAL_RCC_ClockConfig+0x1bc>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	4a58      	ldr	r2, [pc, #352]	@ (8002c6c <HAL_RCC_ClockConfig+0x1bc>)
 8002b0a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b0e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0308 	and.w	r3, r3, #8
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d005      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b1c:	4b53      	ldr	r3, [pc, #332]	@ (8002c6c <HAL_RCC_ClockConfig+0x1bc>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	4a52      	ldr	r2, [pc, #328]	@ (8002c6c <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b28:	4b50      	ldr	r3, [pc, #320]	@ (8002c6c <HAL_RCC_ClockConfig+0x1bc>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	494d      	ldr	r1, [pc, #308]	@ (8002c6c <HAL_RCC_ClockConfig+0x1bc>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d044      	beq.n	8002bd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d107      	bne.n	8002b5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b4e:	4b47      	ldr	r3, [pc, #284]	@ (8002c6c <HAL_RCC_ClockConfig+0x1bc>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d119      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e07f      	b.n	8002c5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d003      	beq.n	8002b6e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b6a:	2b03      	cmp	r3, #3
 8002b6c:	d107      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b6e:	4b3f      	ldr	r3, [pc, #252]	@ (8002c6c <HAL_RCC_ClockConfig+0x1bc>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d109      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e06f      	b.n	8002c5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b7e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c6c <HAL_RCC_ClockConfig+0x1bc>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e067      	b.n	8002c5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b8e:	4b37      	ldr	r3, [pc, #220]	@ (8002c6c <HAL_RCC_ClockConfig+0x1bc>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f023 0203 	bic.w	r2, r3, #3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	4934      	ldr	r1, [pc, #208]	@ (8002c6c <HAL_RCC_ClockConfig+0x1bc>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ba0:	f7fe f8f8 	bl	8000d94 <HAL_GetTick>
 8002ba4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba6:	e00a      	b.n	8002bbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba8:	f7fe f8f4 	bl	8000d94 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e04f      	b.n	8002c5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bbe:	4b2b      	ldr	r3, [pc, #172]	@ (8002c6c <HAL_RCC_ClockConfig+0x1bc>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 020c 	and.w	r2, r3, #12
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d1eb      	bne.n	8002ba8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bd0:	4b25      	ldr	r3, [pc, #148]	@ (8002c68 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d20c      	bcs.n	8002bf8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bde:	4b22      	ldr	r3, [pc, #136]	@ (8002c68 <HAL_RCC_ClockConfig+0x1b8>)
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be6:	4b20      	ldr	r3, [pc, #128]	@ (8002c68 <HAL_RCC_ClockConfig+0x1b8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0307 	and.w	r3, r3, #7
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d001      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e032      	b.n	8002c5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0304 	and.w	r3, r3, #4
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d008      	beq.n	8002c16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c04:	4b19      	ldr	r3, [pc, #100]	@ (8002c6c <HAL_RCC_ClockConfig+0x1bc>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	4916      	ldr	r1, [pc, #88]	@ (8002c6c <HAL_RCC_ClockConfig+0x1bc>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0308 	and.w	r3, r3, #8
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d009      	beq.n	8002c36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c22:	4b12      	ldr	r3, [pc, #72]	@ (8002c6c <HAL_RCC_ClockConfig+0x1bc>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	490e      	ldr	r1, [pc, #56]	@ (8002c6c <HAL_RCC_ClockConfig+0x1bc>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c36:	f000 f821 	bl	8002c7c <HAL_RCC_GetSysClockFreq>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c6c <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	091b      	lsrs	r3, r3, #4
 8002c42:	f003 030f 	and.w	r3, r3, #15
 8002c46:	490a      	ldr	r1, [pc, #40]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c0>)
 8002c48:	5ccb      	ldrb	r3, [r1, r3]
 8002c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c4e:	4a09      	ldr	r2, [pc, #36]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c4>)
 8002c50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002c52:	4b09      	ldr	r3, [pc, #36]	@ (8002c78 <HAL_RCC_ClockConfig+0x1c8>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fe f858 	bl	8000d0c <HAL_InitTick>

  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40023c00 	.word	0x40023c00
 8002c6c:	40023800 	.word	0x40023800
 8002c70:	08003a20 	.word	0x08003a20
 8002c74:	20000000 	.word	0x20000000
 8002c78:	20000004 	.word	0x20000004

08002c7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c80:	b094      	sub	sp, #80	@ 0x50
 8002c82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002c90:	2300      	movs	r3, #0
 8002c92:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c94:	4b79      	ldr	r3, [pc, #484]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f003 030c 	and.w	r3, r3, #12
 8002c9c:	2b08      	cmp	r3, #8
 8002c9e:	d00d      	beq.n	8002cbc <HAL_RCC_GetSysClockFreq+0x40>
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	f200 80e1 	bhi.w	8002e68 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d002      	beq.n	8002cb0 <HAL_RCC_GetSysClockFreq+0x34>
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	d003      	beq.n	8002cb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cae:	e0db      	b.n	8002e68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cb0:	4b73      	ldr	r3, [pc, #460]	@ (8002e80 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cb2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cb4:	e0db      	b.n	8002e6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cb6:	4b73      	ldr	r3, [pc, #460]	@ (8002e84 <HAL_RCC_GetSysClockFreq+0x208>)
 8002cb8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cba:	e0d8      	b.n	8002e6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cbc:	4b6f      	ldr	r3, [pc, #444]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x200>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cc4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cc6:	4b6d      	ldr	r3, [pc, #436]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x200>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d063      	beq.n	8002d9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cd2:	4b6a      	ldr	r3, [pc, #424]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x200>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	099b      	lsrs	r3, r3, #6
 8002cd8:	2200      	movs	r2, #0
 8002cda:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002cdc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ce0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ce4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002cea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002cee:	4622      	mov	r2, r4
 8002cf0:	462b      	mov	r3, r5
 8002cf2:	f04f 0000 	mov.w	r0, #0
 8002cf6:	f04f 0100 	mov.w	r1, #0
 8002cfa:	0159      	lsls	r1, r3, #5
 8002cfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d00:	0150      	lsls	r0, r2, #5
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	4621      	mov	r1, r4
 8002d08:	1a51      	subs	r1, r2, r1
 8002d0a:	6139      	str	r1, [r7, #16]
 8002d0c:	4629      	mov	r1, r5
 8002d0e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	f04f 0200 	mov.w	r2, #0
 8002d18:	f04f 0300 	mov.w	r3, #0
 8002d1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d20:	4659      	mov	r1, fp
 8002d22:	018b      	lsls	r3, r1, #6
 8002d24:	4651      	mov	r1, sl
 8002d26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d2a:	4651      	mov	r1, sl
 8002d2c:	018a      	lsls	r2, r1, #6
 8002d2e:	4651      	mov	r1, sl
 8002d30:	ebb2 0801 	subs.w	r8, r2, r1
 8002d34:	4659      	mov	r1, fp
 8002d36:	eb63 0901 	sbc.w	r9, r3, r1
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	f04f 0300 	mov.w	r3, #0
 8002d42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d4e:	4690      	mov	r8, r2
 8002d50:	4699      	mov	r9, r3
 8002d52:	4623      	mov	r3, r4
 8002d54:	eb18 0303 	adds.w	r3, r8, r3
 8002d58:	60bb      	str	r3, [r7, #8]
 8002d5a:	462b      	mov	r3, r5
 8002d5c:	eb49 0303 	adc.w	r3, r9, r3
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	f04f 0200 	mov.w	r2, #0
 8002d66:	f04f 0300 	mov.w	r3, #0
 8002d6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d6e:	4629      	mov	r1, r5
 8002d70:	024b      	lsls	r3, r1, #9
 8002d72:	4621      	mov	r1, r4
 8002d74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d78:	4621      	mov	r1, r4
 8002d7a:	024a      	lsls	r2, r1, #9
 8002d7c:	4610      	mov	r0, r2
 8002d7e:	4619      	mov	r1, r3
 8002d80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d82:	2200      	movs	r2, #0
 8002d84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d8c:	f7fd fa2a 	bl	80001e4 <__aeabi_uldivmod>
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	4613      	mov	r3, r2
 8002d96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d98:	e058      	b.n	8002e4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d9a:	4b38      	ldr	r3, [pc, #224]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	099b      	lsrs	r3, r3, #6
 8002da0:	2200      	movs	r2, #0
 8002da2:	4618      	mov	r0, r3
 8002da4:	4611      	mov	r1, r2
 8002da6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002daa:	623b      	str	r3, [r7, #32]
 8002dac:	2300      	movs	r3, #0
 8002dae:	627b      	str	r3, [r7, #36]	@ 0x24
 8002db0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002db4:	4642      	mov	r2, r8
 8002db6:	464b      	mov	r3, r9
 8002db8:	f04f 0000 	mov.w	r0, #0
 8002dbc:	f04f 0100 	mov.w	r1, #0
 8002dc0:	0159      	lsls	r1, r3, #5
 8002dc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dc6:	0150      	lsls	r0, r2, #5
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	4641      	mov	r1, r8
 8002dce:	ebb2 0a01 	subs.w	sl, r2, r1
 8002dd2:	4649      	mov	r1, r9
 8002dd4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002dd8:	f04f 0200 	mov.w	r2, #0
 8002ddc:	f04f 0300 	mov.w	r3, #0
 8002de0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002de4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002de8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002dec:	ebb2 040a 	subs.w	r4, r2, sl
 8002df0:	eb63 050b 	sbc.w	r5, r3, fp
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	f04f 0300 	mov.w	r3, #0
 8002dfc:	00eb      	lsls	r3, r5, #3
 8002dfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e02:	00e2      	lsls	r2, r4, #3
 8002e04:	4614      	mov	r4, r2
 8002e06:	461d      	mov	r5, r3
 8002e08:	4643      	mov	r3, r8
 8002e0a:	18e3      	adds	r3, r4, r3
 8002e0c:	603b      	str	r3, [r7, #0]
 8002e0e:	464b      	mov	r3, r9
 8002e10:	eb45 0303 	adc.w	r3, r5, r3
 8002e14:	607b      	str	r3, [r7, #4]
 8002e16:	f04f 0200 	mov.w	r2, #0
 8002e1a:	f04f 0300 	mov.w	r3, #0
 8002e1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e22:	4629      	mov	r1, r5
 8002e24:	028b      	lsls	r3, r1, #10
 8002e26:	4621      	mov	r1, r4
 8002e28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e2c:	4621      	mov	r1, r4
 8002e2e:	028a      	lsls	r2, r1, #10
 8002e30:	4610      	mov	r0, r2
 8002e32:	4619      	mov	r1, r3
 8002e34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e36:	2200      	movs	r2, #0
 8002e38:	61bb      	str	r3, [r7, #24]
 8002e3a:	61fa      	str	r2, [r7, #28]
 8002e3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e40:	f7fd f9d0 	bl	80001e4 <__aeabi_uldivmod>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	4613      	mov	r3, r2
 8002e4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	0c1b      	lsrs	r3, r3, #16
 8002e52:	f003 0303 	and.w	r3, r3, #3
 8002e56:	3301      	adds	r3, #1
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002e5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e64:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e66:	e002      	b.n	8002e6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e68:	4b05      	ldr	r3, [pc, #20]	@ (8002e80 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e6a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3750      	adds	r7, #80	@ 0x50
 8002e74:	46bd      	mov	sp, r7
 8002e76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	00f42400 	.word	0x00f42400
 8002e84:	007a1200 	.word	0x007a1200

08002e88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e8c:	4b03      	ldr	r3, [pc, #12]	@ (8002e9c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	20000000 	.word	0x20000000

08002ea0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ea4:	f7ff fff0 	bl	8002e88 <HAL_RCC_GetHCLKFreq>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	4b05      	ldr	r3, [pc, #20]	@ (8002ec0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	0a9b      	lsrs	r3, r3, #10
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	4903      	ldr	r1, [pc, #12]	@ (8002ec4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eb6:	5ccb      	ldrb	r3, [r1, r3]
 8002eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	08003a30 	.word	0x08003a30

08002ec8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ecc:	f7ff ffdc 	bl	8002e88 <HAL_RCC_GetHCLKFreq>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	4b05      	ldr	r3, [pc, #20]	@ (8002ee8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	0b5b      	lsrs	r3, r3, #13
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	4903      	ldr	r1, [pc, #12]	@ (8002eec <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ede:	5ccb      	ldrb	r3, [r1, r3]
 8002ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	08003a30 	.word	0x08003a30

08002ef0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d105      	bne.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d035      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f18:	4b67      	ldr	r3, [pc, #412]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f1e:	f7fd ff39 	bl	8000d94 <HAL_GetTick>
 8002f22:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f24:	e008      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f26:	f7fd ff35 	bl	8000d94 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e0ba      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f38:	4b60      	ldr	r3, [pc, #384]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1f0      	bne.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	019a      	lsls	r2, r3, #6
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	071b      	lsls	r3, r3, #28
 8002f50:	495a      	ldr	r1, [pc, #360]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f58:	4b57      	ldr	r3, [pc, #348]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f5e:	f7fd ff19 	bl	8000d94 <HAL_GetTick>
 8002f62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f64:	e008      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f66:	f7fd ff15 	bl	8000d94 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e09a      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f78:	4b50      	ldr	r3, [pc, #320]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0f0      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 8083 	beq.w	8003098 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f92:	2300      	movs	r3, #0
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	4b49      	ldr	r3, [pc, #292]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9a:	4a48      	ldr	r2, [pc, #288]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fa2:	4b46      	ldr	r3, [pc, #280]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002fae:	4b44      	ldr	r3, [pc, #272]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a43      	ldr	r2, [pc, #268]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fb8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002fba:	f7fd feeb 	bl	8000d94 <HAL_GetTick>
 8002fbe:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002fc0:	e008      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fc2:	f7fd fee7 	bl	8000d94 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e06c      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002fd4:	4b3a      	ldr	r3, [pc, #232]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d0f0      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fe0:	4b36      	ldr	r3, [pc, #216]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002fe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fe8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d02f      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d028      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ffe:	4b2f      	ldr	r3, [pc, #188]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003002:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003006:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003008:	4b2e      	ldr	r3, [pc, #184]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800300a:	2201      	movs	r2, #1
 800300c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800300e:	4b2d      	ldr	r3, [pc, #180]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003014:	4a29      	ldr	r2, [pc, #164]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800301a:	4b28      	ldr	r3, [pc, #160]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800301c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b01      	cmp	r3, #1
 8003024:	d114      	bne.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003026:	f7fd feb5 	bl	8000d94 <HAL_GetTick>
 800302a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800302c:	e00a      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302e:	f7fd feb1 	bl	8000d94 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	f241 3288 	movw	r2, #5000	@ 0x1388
 800303c:	4293      	cmp	r3, r2
 800303e:	d901      	bls.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e034      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003044:	4b1d      	ldr	r3, [pc, #116]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0ee      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003058:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800305c:	d10d      	bne.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800305e:	4b17      	ldr	r3, [pc, #92]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800306e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003072:	4912      	ldr	r1, [pc, #72]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003074:	4313      	orrs	r3, r2
 8003076:	608b      	str	r3, [r1, #8]
 8003078:	e005      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800307a:	4b10      	ldr	r3, [pc, #64]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	4a0f      	ldr	r2, [pc, #60]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003080:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003084:	6093      	str	r3, [r2, #8]
 8003086:	4b0d      	ldr	r3, [pc, #52]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003088:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003092:	490a      	ldr	r1, [pc, #40]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003094:	4313      	orrs	r3, r2
 8003096:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0308 	and.w	r3, r3, #8
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d003      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	7c1a      	ldrb	r2, [r3, #16]
 80030a8:	4b07      	ldr	r3, [pc, #28]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80030aa:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3718      	adds	r7, #24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	42470068 	.word	0x42470068
 80030bc:	40023800 	.word	0x40023800
 80030c0:	40007000 	.word	0x40007000
 80030c4:	42470e40 	.word	0x42470e40
 80030c8:	424711e0 	.word	0x424711e0

080030cc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b087      	sub	sp, #28
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80030d8:	2300      	movs	r3, #0
 80030da:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80030dc:	2300      	movs	r3, #0
 80030de:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d13f      	bne.n	800316a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80030ea:	4b24      	ldr	r3, [pc, #144]	@ (800317c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030f2:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d006      	beq.n	8003108 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003100:	d12f      	bne.n	8003162 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003102:	4b1f      	ldr	r3, [pc, #124]	@ (8003180 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003104:	617b      	str	r3, [r7, #20]
          break;
 8003106:	e02f      	b.n	8003168 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003108:	4b1c      	ldr	r3, [pc, #112]	@ (800317c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003110:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003114:	d108      	bne.n	8003128 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003116:	4b19      	ldr	r3, [pc, #100]	@ (800317c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800311e:	4a19      	ldr	r2, [pc, #100]	@ (8003184 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003120:	fbb2 f3f3 	udiv	r3, r2, r3
 8003124:	613b      	str	r3, [r7, #16]
 8003126:	e007      	b.n	8003138 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003128:	4b14      	ldr	r3, [pc, #80]	@ (800317c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003130:	4a15      	ldr	r2, [pc, #84]	@ (8003188 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8003132:	fbb2 f3f3 	udiv	r3, r2, r3
 8003136:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003138:	4b10      	ldr	r3, [pc, #64]	@ (800317c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800313a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800313e:	099b      	lsrs	r3, r3, #6
 8003140:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	fb02 f303 	mul.w	r3, r2, r3
 800314a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800314c:	4b0b      	ldr	r3, [pc, #44]	@ (800317c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800314e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003152:	0f1b      	lsrs	r3, r3, #28
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	fbb2 f3f3 	udiv	r3, r2, r3
 800315e:	617b      	str	r3, [r7, #20]
          break;
 8003160:	e002      	b.n	8003168 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8003162:	2300      	movs	r3, #0
 8003164:	617b      	str	r3, [r7, #20]
          break;
 8003166:	bf00      	nop
        }
      }
      break;
 8003168:	e000      	b.n	800316c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800316a:	bf00      	nop
    }
  }
  return frequency;
 800316c:	697b      	ldr	r3, [r7, #20]
}
 800316e:	4618      	mov	r0, r3
 8003170:	371c      	adds	r7, #28
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	40023800 	.word	0x40023800
 8003180:	00bb8000 	.word	0x00bb8000
 8003184:	007a1200 	.word	0x007a1200
 8003188:	00f42400 	.word	0x00f42400

0800318c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e042      	b.n	8003224 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d106      	bne.n	80031b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7fd fcca 	bl	8000b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2224      	movs	r2, #36	@ 0x24
 80031bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 f973 	bl	80034bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	691a      	ldr	r2, [r3, #16]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	695a      	ldr	r2, [r3, #20]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80031f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68da      	ldr	r2, [r3, #12]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003204:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2220      	movs	r2, #32
 8003210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2220      	movs	r2, #32
 8003218:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b08a      	sub	sp, #40	@ 0x28
 8003230:	af02      	add	r7, sp, #8
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	603b      	str	r3, [r7, #0]
 8003238:	4613      	mov	r3, r2
 800323a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800323c:	2300      	movs	r3, #0
 800323e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b20      	cmp	r3, #32
 800324a:	d175      	bne.n	8003338 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d002      	beq.n	8003258 <HAL_UART_Transmit+0x2c>
 8003252:	88fb      	ldrh	r3, [r7, #6]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e06e      	b.n	800333a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2221      	movs	r2, #33	@ 0x21
 8003266:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800326a:	f7fd fd93 	bl	8000d94 <HAL_GetTick>
 800326e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	88fa      	ldrh	r2, [r7, #6]
 8003274:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	88fa      	ldrh	r2, [r7, #6]
 800327a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003284:	d108      	bne.n	8003298 <HAL_UART_Transmit+0x6c>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d104      	bne.n	8003298 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800328e:	2300      	movs	r3, #0
 8003290:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	61bb      	str	r3, [r7, #24]
 8003296:	e003      	b.n	80032a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800329c:	2300      	movs	r3, #0
 800329e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032a0:	e02e      	b.n	8003300 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	2200      	movs	r2, #0
 80032aa:	2180      	movs	r1, #128	@ 0x80
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f000 f848 	bl	8003342 <UART_WaitOnFlagUntilTimeout>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d005      	beq.n	80032c4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2220      	movs	r2, #32
 80032bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e03a      	b.n	800333a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10b      	bne.n	80032e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	881b      	ldrh	r3, [r3, #0]
 80032ce:	461a      	mov	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	3302      	adds	r3, #2
 80032de:	61bb      	str	r3, [r7, #24]
 80032e0:	e007      	b.n	80032f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	781a      	ldrb	r2, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	3301      	adds	r3, #1
 80032f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	3b01      	subs	r3, #1
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003304:	b29b      	uxth	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1cb      	bne.n	80032a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	9300      	str	r3, [sp, #0]
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	2200      	movs	r2, #0
 8003312:	2140      	movs	r1, #64	@ 0x40
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 f814 	bl	8003342 <UART_WaitOnFlagUntilTimeout>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d005      	beq.n	800332c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2220      	movs	r2, #32
 8003324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e006      	b.n	800333a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2220      	movs	r2, #32
 8003330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003334:	2300      	movs	r3, #0
 8003336:	e000      	b.n	800333a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003338:	2302      	movs	r3, #2
  }
}
 800333a:	4618      	mov	r0, r3
 800333c:	3720      	adds	r7, #32
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b086      	sub	sp, #24
 8003346:	af00      	add	r7, sp, #0
 8003348:	60f8      	str	r0, [r7, #12]
 800334a:	60b9      	str	r1, [r7, #8]
 800334c:	603b      	str	r3, [r7, #0]
 800334e:	4613      	mov	r3, r2
 8003350:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003352:	e03b      	b.n	80033cc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003354:	6a3b      	ldr	r3, [r7, #32]
 8003356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335a:	d037      	beq.n	80033cc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800335c:	f7fd fd1a 	bl	8000d94 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	6a3a      	ldr	r2, [r7, #32]
 8003368:	429a      	cmp	r2, r3
 800336a:	d302      	bcc.n	8003372 <UART_WaitOnFlagUntilTimeout+0x30>
 800336c:	6a3b      	ldr	r3, [r7, #32]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e03a      	b.n	80033ec <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f003 0304 	and.w	r3, r3, #4
 8003380:	2b00      	cmp	r3, #0
 8003382:	d023      	beq.n	80033cc <UART_WaitOnFlagUntilTimeout+0x8a>
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	2b80      	cmp	r3, #128	@ 0x80
 8003388:	d020      	beq.n	80033cc <UART_WaitOnFlagUntilTimeout+0x8a>
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	2b40      	cmp	r3, #64	@ 0x40
 800338e:	d01d      	beq.n	80033cc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0308 	and.w	r3, r3, #8
 800339a:	2b08      	cmp	r3, #8
 800339c:	d116      	bne.n	80033cc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800339e:	2300      	movs	r3, #0
 80033a0:	617b      	str	r3, [r7, #20]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	617b      	str	r3, [r7, #20]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	617b      	str	r3, [r7, #20]
 80033b2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f000 f81d 	bl	80033f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2208      	movs	r2, #8
 80033be:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e00f      	b.n	80033ec <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	4013      	ands	r3, r2
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	429a      	cmp	r2, r3
 80033da:	bf0c      	ite	eq
 80033dc:	2301      	moveq	r3, #1
 80033de:	2300      	movne	r3, #0
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	461a      	mov	r2, r3
 80033e4:	79fb      	ldrb	r3, [r7, #7]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d0b4      	beq.n	8003354 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3718      	adds	r7, #24
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b095      	sub	sp, #84	@ 0x54
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	330c      	adds	r3, #12
 8003402:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003406:	e853 3f00 	ldrex	r3, [r3]
 800340a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800340c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800340e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003412:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	330c      	adds	r3, #12
 800341a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800341c:	643a      	str	r2, [r7, #64]	@ 0x40
 800341e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003420:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003422:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003424:	e841 2300 	strex	r3, r2, [r1]
 8003428:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800342a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1e5      	bne.n	80033fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	3314      	adds	r3, #20
 8003436:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003438:	6a3b      	ldr	r3, [r7, #32]
 800343a:	e853 3f00 	ldrex	r3, [r3]
 800343e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	f023 0301 	bic.w	r3, r3, #1
 8003446:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	3314      	adds	r3, #20
 800344e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003450:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003452:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003454:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003456:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003458:	e841 2300 	strex	r3, r2, [r1]
 800345c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800345e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1e5      	bne.n	8003430 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003468:	2b01      	cmp	r3, #1
 800346a:	d119      	bne.n	80034a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	330c      	adds	r3, #12
 8003472:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	e853 3f00 	ldrex	r3, [r3]
 800347a:	60bb      	str	r3, [r7, #8]
   return(result);
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	f023 0310 	bic.w	r3, r3, #16
 8003482:	647b      	str	r3, [r7, #68]	@ 0x44
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	330c      	adds	r3, #12
 800348a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800348c:	61ba      	str	r2, [r7, #24]
 800348e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003490:	6979      	ldr	r1, [r7, #20]
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	e841 2300 	strex	r3, r2, [r1]
 8003498:	613b      	str	r3, [r7, #16]
   return(result);
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1e5      	bne.n	800346c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2220      	movs	r2, #32
 80034a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80034ae:	bf00      	nop
 80034b0:	3754      	adds	r7, #84	@ 0x54
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
	...

080034bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034c0:	b0c0      	sub	sp, #256	@ 0x100
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80034d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034d8:	68d9      	ldr	r1, [r3, #12]
 80034da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	ea40 0301 	orr.w	r3, r0, r1
 80034e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034ea:	689a      	ldr	r2, [r3, #8]
 80034ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	431a      	orrs	r2, r3
 80034f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	431a      	orrs	r2, r3
 80034fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	4313      	orrs	r3, r2
 8003504:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003514:	f021 010c 	bic.w	r1, r1, #12
 8003518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003522:	430b      	orrs	r3, r1
 8003524:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003536:	6999      	ldr	r1, [r3, #24]
 8003538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	ea40 0301 	orr.w	r3, r0, r1
 8003542:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	4b8f      	ldr	r3, [pc, #572]	@ (8003788 <UART_SetConfig+0x2cc>)
 800354c:	429a      	cmp	r2, r3
 800354e:	d005      	beq.n	800355c <UART_SetConfig+0xa0>
 8003550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	4b8d      	ldr	r3, [pc, #564]	@ (800378c <UART_SetConfig+0x2d0>)
 8003558:	429a      	cmp	r2, r3
 800355a:	d104      	bne.n	8003566 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800355c:	f7ff fcb4 	bl	8002ec8 <HAL_RCC_GetPCLK2Freq>
 8003560:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003564:	e003      	b.n	800356e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003566:	f7ff fc9b 	bl	8002ea0 <HAL_RCC_GetPCLK1Freq>
 800356a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800356e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003572:	69db      	ldr	r3, [r3, #28]
 8003574:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003578:	f040 810c 	bne.w	8003794 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800357c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003580:	2200      	movs	r2, #0
 8003582:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003586:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800358a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800358e:	4622      	mov	r2, r4
 8003590:	462b      	mov	r3, r5
 8003592:	1891      	adds	r1, r2, r2
 8003594:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003596:	415b      	adcs	r3, r3
 8003598:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800359a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800359e:	4621      	mov	r1, r4
 80035a0:	eb12 0801 	adds.w	r8, r2, r1
 80035a4:	4629      	mov	r1, r5
 80035a6:	eb43 0901 	adc.w	r9, r3, r1
 80035aa:	f04f 0200 	mov.w	r2, #0
 80035ae:	f04f 0300 	mov.w	r3, #0
 80035b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035be:	4690      	mov	r8, r2
 80035c0:	4699      	mov	r9, r3
 80035c2:	4623      	mov	r3, r4
 80035c4:	eb18 0303 	adds.w	r3, r8, r3
 80035c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80035cc:	462b      	mov	r3, r5
 80035ce:	eb49 0303 	adc.w	r3, r9, r3
 80035d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80035d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80035e2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80035e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80035ea:	460b      	mov	r3, r1
 80035ec:	18db      	adds	r3, r3, r3
 80035ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80035f0:	4613      	mov	r3, r2
 80035f2:	eb42 0303 	adc.w	r3, r2, r3
 80035f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80035f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80035fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003600:	f7fc fdf0 	bl	80001e4 <__aeabi_uldivmod>
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	4b61      	ldr	r3, [pc, #388]	@ (8003790 <UART_SetConfig+0x2d4>)
 800360a:	fba3 2302 	umull	r2, r3, r3, r2
 800360e:	095b      	lsrs	r3, r3, #5
 8003610:	011c      	lsls	r4, r3, #4
 8003612:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003616:	2200      	movs	r2, #0
 8003618:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800361c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003620:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003624:	4642      	mov	r2, r8
 8003626:	464b      	mov	r3, r9
 8003628:	1891      	adds	r1, r2, r2
 800362a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800362c:	415b      	adcs	r3, r3
 800362e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003630:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003634:	4641      	mov	r1, r8
 8003636:	eb12 0a01 	adds.w	sl, r2, r1
 800363a:	4649      	mov	r1, r9
 800363c:	eb43 0b01 	adc.w	fp, r3, r1
 8003640:	f04f 0200 	mov.w	r2, #0
 8003644:	f04f 0300 	mov.w	r3, #0
 8003648:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800364c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003650:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003654:	4692      	mov	sl, r2
 8003656:	469b      	mov	fp, r3
 8003658:	4643      	mov	r3, r8
 800365a:	eb1a 0303 	adds.w	r3, sl, r3
 800365e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003662:	464b      	mov	r3, r9
 8003664:	eb4b 0303 	adc.w	r3, fp, r3
 8003668:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800366c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003678:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800367c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003680:	460b      	mov	r3, r1
 8003682:	18db      	adds	r3, r3, r3
 8003684:	643b      	str	r3, [r7, #64]	@ 0x40
 8003686:	4613      	mov	r3, r2
 8003688:	eb42 0303 	adc.w	r3, r2, r3
 800368c:	647b      	str	r3, [r7, #68]	@ 0x44
 800368e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003692:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003696:	f7fc fda5 	bl	80001e4 <__aeabi_uldivmod>
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	4611      	mov	r1, r2
 80036a0:	4b3b      	ldr	r3, [pc, #236]	@ (8003790 <UART_SetConfig+0x2d4>)
 80036a2:	fba3 2301 	umull	r2, r3, r3, r1
 80036a6:	095b      	lsrs	r3, r3, #5
 80036a8:	2264      	movs	r2, #100	@ 0x64
 80036aa:	fb02 f303 	mul.w	r3, r2, r3
 80036ae:	1acb      	subs	r3, r1, r3
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80036b6:	4b36      	ldr	r3, [pc, #216]	@ (8003790 <UART_SetConfig+0x2d4>)
 80036b8:	fba3 2302 	umull	r2, r3, r3, r2
 80036bc:	095b      	lsrs	r3, r3, #5
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80036c4:	441c      	add	r4, r3
 80036c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036ca:	2200      	movs	r2, #0
 80036cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80036d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80036d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80036d8:	4642      	mov	r2, r8
 80036da:	464b      	mov	r3, r9
 80036dc:	1891      	adds	r1, r2, r2
 80036de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80036e0:	415b      	adcs	r3, r3
 80036e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80036e8:	4641      	mov	r1, r8
 80036ea:	1851      	adds	r1, r2, r1
 80036ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80036ee:	4649      	mov	r1, r9
 80036f0:	414b      	adcs	r3, r1
 80036f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80036f4:	f04f 0200 	mov.w	r2, #0
 80036f8:	f04f 0300 	mov.w	r3, #0
 80036fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003700:	4659      	mov	r1, fp
 8003702:	00cb      	lsls	r3, r1, #3
 8003704:	4651      	mov	r1, sl
 8003706:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800370a:	4651      	mov	r1, sl
 800370c:	00ca      	lsls	r2, r1, #3
 800370e:	4610      	mov	r0, r2
 8003710:	4619      	mov	r1, r3
 8003712:	4603      	mov	r3, r0
 8003714:	4642      	mov	r2, r8
 8003716:	189b      	adds	r3, r3, r2
 8003718:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800371c:	464b      	mov	r3, r9
 800371e:	460a      	mov	r2, r1
 8003720:	eb42 0303 	adc.w	r3, r2, r3
 8003724:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003734:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003738:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800373c:	460b      	mov	r3, r1
 800373e:	18db      	adds	r3, r3, r3
 8003740:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003742:	4613      	mov	r3, r2
 8003744:	eb42 0303 	adc.w	r3, r2, r3
 8003748:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800374a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800374e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003752:	f7fc fd47 	bl	80001e4 <__aeabi_uldivmod>
 8003756:	4602      	mov	r2, r0
 8003758:	460b      	mov	r3, r1
 800375a:	4b0d      	ldr	r3, [pc, #52]	@ (8003790 <UART_SetConfig+0x2d4>)
 800375c:	fba3 1302 	umull	r1, r3, r3, r2
 8003760:	095b      	lsrs	r3, r3, #5
 8003762:	2164      	movs	r1, #100	@ 0x64
 8003764:	fb01 f303 	mul.w	r3, r1, r3
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	3332      	adds	r3, #50	@ 0x32
 800376e:	4a08      	ldr	r2, [pc, #32]	@ (8003790 <UART_SetConfig+0x2d4>)
 8003770:	fba2 2303 	umull	r2, r3, r2, r3
 8003774:	095b      	lsrs	r3, r3, #5
 8003776:	f003 0207 	and.w	r2, r3, #7
 800377a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4422      	add	r2, r4
 8003782:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003784:	e106      	b.n	8003994 <UART_SetConfig+0x4d8>
 8003786:	bf00      	nop
 8003788:	40011000 	.word	0x40011000
 800378c:	40011400 	.word	0x40011400
 8003790:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003794:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003798:	2200      	movs	r2, #0
 800379a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800379e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80037a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80037a6:	4642      	mov	r2, r8
 80037a8:	464b      	mov	r3, r9
 80037aa:	1891      	adds	r1, r2, r2
 80037ac:	6239      	str	r1, [r7, #32]
 80037ae:	415b      	adcs	r3, r3
 80037b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80037b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037b6:	4641      	mov	r1, r8
 80037b8:	1854      	adds	r4, r2, r1
 80037ba:	4649      	mov	r1, r9
 80037bc:	eb43 0501 	adc.w	r5, r3, r1
 80037c0:	f04f 0200 	mov.w	r2, #0
 80037c4:	f04f 0300 	mov.w	r3, #0
 80037c8:	00eb      	lsls	r3, r5, #3
 80037ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037ce:	00e2      	lsls	r2, r4, #3
 80037d0:	4614      	mov	r4, r2
 80037d2:	461d      	mov	r5, r3
 80037d4:	4643      	mov	r3, r8
 80037d6:	18e3      	adds	r3, r4, r3
 80037d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80037dc:	464b      	mov	r3, r9
 80037de:	eb45 0303 	adc.w	r3, r5, r3
 80037e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80037e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80037f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80037f6:	f04f 0200 	mov.w	r2, #0
 80037fa:	f04f 0300 	mov.w	r3, #0
 80037fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003802:	4629      	mov	r1, r5
 8003804:	008b      	lsls	r3, r1, #2
 8003806:	4621      	mov	r1, r4
 8003808:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800380c:	4621      	mov	r1, r4
 800380e:	008a      	lsls	r2, r1, #2
 8003810:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003814:	f7fc fce6 	bl	80001e4 <__aeabi_uldivmod>
 8003818:	4602      	mov	r2, r0
 800381a:	460b      	mov	r3, r1
 800381c:	4b60      	ldr	r3, [pc, #384]	@ (80039a0 <UART_SetConfig+0x4e4>)
 800381e:	fba3 2302 	umull	r2, r3, r3, r2
 8003822:	095b      	lsrs	r3, r3, #5
 8003824:	011c      	lsls	r4, r3, #4
 8003826:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800382a:	2200      	movs	r2, #0
 800382c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003830:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003834:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003838:	4642      	mov	r2, r8
 800383a:	464b      	mov	r3, r9
 800383c:	1891      	adds	r1, r2, r2
 800383e:	61b9      	str	r1, [r7, #24]
 8003840:	415b      	adcs	r3, r3
 8003842:	61fb      	str	r3, [r7, #28]
 8003844:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003848:	4641      	mov	r1, r8
 800384a:	1851      	adds	r1, r2, r1
 800384c:	6139      	str	r1, [r7, #16]
 800384e:	4649      	mov	r1, r9
 8003850:	414b      	adcs	r3, r1
 8003852:	617b      	str	r3, [r7, #20]
 8003854:	f04f 0200 	mov.w	r2, #0
 8003858:	f04f 0300 	mov.w	r3, #0
 800385c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003860:	4659      	mov	r1, fp
 8003862:	00cb      	lsls	r3, r1, #3
 8003864:	4651      	mov	r1, sl
 8003866:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800386a:	4651      	mov	r1, sl
 800386c:	00ca      	lsls	r2, r1, #3
 800386e:	4610      	mov	r0, r2
 8003870:	4619      	mov	r1, r3
 8003872:	4603      	mov	r3, r0
 8003874:	4642      	mov	r2, r8
 8003876:	189b      	adds	r3, r3, r2
 8003878:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800387c:	464b      	mov	r3, r9
 800387e:	460a      	mov	r2, r1
 8003880:	eb42 0303 	adc.w	r3, r2, r3
 8003884:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003892:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003894:	f04f 0200 	mov.w	r2, #0
 8003898:	f04f 0300 	mov.w	r3, #0
 800389c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80038a0:	4649      	mov	r1, r9
 80038a2:	008b      	lsls	r3, r1, #2
 80038a4:	4641      	mov	r1, r8
 80038a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038aa:	4641      	mov	r1, r8
 80038ac:	008a      	lsls	r2, r1, #2
 80038ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80038b2:	f7fc fc97 	bl	80001e4 <__aeabi_uldivmod>
 80038b6:	4602      	mov	r2, r0
 80038b8:	460b      	mov	r3, r1
 80038ba:	4611      	mov	r1, r2
 80038bc:	4b38      	ldr	r3, [pc, #224]	@ (80039a0 <UART_SetConfig+0x4e4>)
 80038be:	fba3 2301 	umull	r2, r3, r3, r1
 80038c2:	095b      	lsrs	r3, r3, #5
 80038c4:	2264      	movs	r2, #100	@ 0x64
 80038c6:	fb02 f303 	mul.w	r3, r2, r3
 80038ca:	1acb      	subs	r3, r1, r3
 80038cc:	011b      	lsls	r3, r3, #4
 80038ce:	3332      	adds	r3, #50	@ 0x32
 80038d0:	4a33      	ldr	r2, [pc, #204]	@ (80039a0 <UART_SetConfig+0x4e4>)
 80038d2:	fba2 2303 	umull	r2, r3, r2, r3
 80038d6:	095b      	lsrs	r3, r3, #5
 80038d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038dc:	441c      	add	r4, r3
 80038de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038e2:	2200      	movs	r2, #0
 80038e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80038e6:	677a      	str	r2, [r7, #116]	@ 0x74
 80038e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80038ec:	4642      	mov	r2, r8
 80038ee:	464b      	mov	r3, r9
 80038f0:	1891      	adds	r1, r2, r2
 80038f2:	60b9      	str	r1, [r7, #8]
 80038f4:	415b      	adcs	r3, r3
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038fc:	4641      	mov	r1, r8
 80038fe:	1851      	adds	r1, r2, r1
 8003900:	6039      	str	r1, [r7, #0]
 8003902:	4649      	mov	r1, r9
 8003904:	414b      	adcs	r3, r1
 8003906:	607b      	str	r3, [r7, #4]
 8003908:	f04f 0200 	mov.w	r2, #0
 800390c:	f04f 0300 	mov.w	r3, #0
 8003910:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003914:	4659      	mov	r1, fp
 8003916:	00cb      	lsls	r3, r1, #3
 8003918:	4651      	mov	r1, sl
 800391a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800391e:	4651      	mov	r1, sl
 8003920:	00ca      	lsls	r2, r1, #3
 8003922:	4610      	mov	r0, r2
 8003924:	4619      	mov	r1, r3
 8003926:	4603      	mov	r3, r0
 8003928:	4642      	mov	r2, r8
 800392a:	189b      	adds	r3, r3, r2
 800392c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800392e:	464b      	mov	r3, r9
 8003930:	460a      	mov	r2, r1
 8003932:	eb42 0303 	adc.w	r3, r2, r3
 8003936:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	663b      	str	r3, [r7, #96]	@ 0x60
 8003942:	667a      	str	r2, [r7, #100]	@ 0x64
 8003944:	f04f 0200 	mov.w	r2, #0
 8003948:	f04f 0300 	mov.w	r3, #0
 800394c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003950:	4649      	mov	r1, r9
 8003952:	008b      	lsls	r3, r1, #2
 8003954:	4641      	mov	r1, r8
 8003956:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800395a:	4641      	mov	r1, r8
 800395c:	008a      	lsls	r2, r1, #2
 800395e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003962:	f7fc fc3f 	bl	80001e4 <__aeabi_uldivmod>
 8003966:	4602      	mov	r2, r0
 8003968:	460b      	mov	r3, r1
 800396a:	4b0d      	ldr	r3, [pc, #52]	@ (80039a0 <UART_SetConfig+0x4e4>)
 800396c:	fba3 1302 	umull	r1, r3, r3, r2
 8003970:	095b      	lsrs	r3, r3, #5
 8003972:	2164      	movs	r1, #100	@ 0x64
 8003974:	fb01 f303 	mul.w	r3, r1, r3
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	3332      	adds	r3, #50	@ 0x32
 800397e:	4a08      	ldr	r2, [pc, #32]	@ (80039a0 <UART_SetConfig+0x4e4>)
 8003980:	fba2 2303 	umull	r2, r3, r2, r3
 8003984:	095b      	lsrs	r3, r3, #5
 8003986:	f003 020f 	and.w	r2, r3, #15
 800398a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4422      	add	r2, r4
 8003992:	609a      	str	r2, [r3, #8]
}
 8003994:	bf00      	nop
 8003996:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800399a:	46bd      	mov	sp, r7
 800399c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039a0:	51eb851f 	.word	0x51eb851f

080039a4 <memset>:
 80039a4:	4402      	add	r2, r0
 80039a6:	4603      	mov	r3, r0
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d100      	bne.n	80039ae <memset+0xa>
 80039ac:	4770      	bx	lr
 80039ae:	f803 1b01 	strb.w	r1, [r3], #1
 80039b2:	e7f9      	b.n	80039a8 <memset+0x4>

080039b4 <__libc_init_array>:
 80039b4:	b570      	push	{r4, r5, r6, lr}
 80039b6:	4d0d      	ldr	r5, [pc, #52]	@ (80039ec <__libc_init_array+0x38>)
 80039b8:	4c0d      	ldr	r4, [pc, #52]	@ (80039f0 <__libc_init_array+0x3c>)
 80039ba:	1b64      	subs	r4, r4, r5
 80039bc:	10a4      	asrs	r4, r4, #2
 80039be:	2600      	movs	r6, #0
 80039c0:	42a6      	cmp	r6, r4
 80039c2:	d109      	bne.n	80039d8 <__libc_init_array+0x24>
 80039c4:	4d0b      	ldr	r5, [pc, #44]	@ (80039f4 <__libc_init_array+0x40>)
 80039c6:	4c0c      	ldr	r4, [pc, #48]	@ (80039f8 <__libc_init_array+0x44>)
 80039c8:	f000 f818 	bl	80039fc <_init>
 80039cc:	1b64      	subs	r4, r4, r5
 80039ce:	10a4      	asrs	r4, r4, #2
 80039d0:	2600      	movs	r6, #0
 80039d2:	42a6      	cmp	r6, r4
 80039d4:	d105      	bne.n	80039e2 <__libc_init_array+0x2e>
 80039d6:	bd70      	pop	{r4, r5, r6, pc}
 80039d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80039dc:	4798      	blx	r3
 80039de:	3601      	adds	r6, #1
 80039e0:	e7ee      	b.n	80039c0 <__libc_init_array+0xc>
 80039e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80039e6:	4798      	blx	r3
 80039e8:	3601      	adds	r6, #1
 80039ea:	e7f2      	b.n	80039d2 <__libc_init_array+0x1e>
 80039ec:	08003a48 	.word	0x08003a48
 80039f0:	08003a48 	.word	0x08003a48
 80039f4:	08003a48 	.word	0x08003a48
 80039f8:	08003a4c 	.word	0x08003a4c

080039fc <_init>:
 80039fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039fe:	bf00      	nop
 8003a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a02:	bc08      	pop	{r3}
 8003a04:	469e      	mov	lr, r3
 8003a06:	4770      	bx	lr

08003a08 <_fini>:
 8003a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a0a:	bf00      	nop
 8003a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a0e:	bc08      	pop	{r3}
 8003a10:	469e      	mov	lr, r3
 8003a12:	4770      	bx	lr
